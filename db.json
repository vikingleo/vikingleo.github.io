{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1561464004000},{"_id":"themes/icarus/_config.yml","hash":"ff4fdd6df3a188c0d1096f88fd1fba9587ca0082","modified":1562659119168},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1561464004000},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1561464004000},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1561464004000},{"_id":"source/_posts/PS傻瓜使用记录·剪切蒙版.md","hash":"15bb4ff61486234ddc36872be41c544a5d29f08e","modified":1562049555514},{"_id":"source/_posts/Nuxt.js使用axios、自定义拦截器和代理.md","hash":"032306273e2b169c4c4b4d2f02553ee690adc23a","modified":1562049923511},{"_id":"source/_posts/Vue.js.md","hash":"fbf02984896d06940424e79aec8b27525463f474","modified":1562049781121},{"_id":"source/_posts/docker.md","hash":"4fa310e595adb8f15310515941db399aa31ba280","modified":1562049884079},{"_id":"source/_posts/wechat-app.md","hash":"44adccf17ba78b27a09e6270f1e9cc41c0c557ec","modified":1562049762463},{"_id":"source/_posts/微信小程序input监听获取值.md","hash":"312f185e1bef47d2eddcde2e5dec98f10603f994","modified":1562049709644},{"_id":"source/_posts/使用frp内网穿透.md","hash":"f1c1d295d7ee26942d335582079567e064538059","modified":1562049967268},{"_id":"source/_posts/常用linux命令收集.md","hash":"b9a118b6459d4e439a6c957343595d3d7bc695fe","modified":1562049742372},{"_id":"source/categories/index.md","hash":"71c6456a5556b223de7869a40fe1da2e5957af86","modified":1562047394449},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1561464004000},{"_id":"source/tags/index.md","hash":"b838a582cc0dc60fe7dbf4b0dbea3802a5a97d82","modified":1562047394450},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1561464004000},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1561464004000},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1561464004000},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1561464004000},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1561464004000},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1561464004000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1561464004000},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1561464004000},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1561464004000},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1561464004000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1561464004000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1561464004000},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1561464004000},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1561464004000},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1561464004000},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1561464004000},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1561464004000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1561464004000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1561464004000},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1561464004000},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1561464004000},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1561464004000},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1561464004000},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1561464004000},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1561464004000},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1561464004000},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1561464004000},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1561464004000},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1561464004000},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1561464004000},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1561464004000},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1561464004000},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1561464004000},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1561464004000},{"_id":"themes/icarus/includes/helpers/page.js","hash":"50dab1e4ecef55cd090625f91c5456b801e307f2","modified":1561464004000},{"_id":"themes/icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1561464004000},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1561464004000},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"4b84b08214cc21feaa4322357f0bec800bfca826","modified":1561464004000},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1561464004000},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1561464004000},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1561464004000},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1561464004000},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1561464004000},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1561464004000},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1561464004000},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1561464004000},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1561464004000},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1561464004000},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1561464004000},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1561464004000},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1561464004000},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1561464004000},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1561464004000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1561464004000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1561464004000},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"ef01396e64ab4f6e62155f0b357bcd903138d611","modified":1561464004000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1561464004000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1561464004000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1561464004000},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1561464004000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1561464004000},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1561464004000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"12506ec5e7970eafdfde92c8d2ea44a40f1ba141","modified":1561464004000},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"5082ea45df0f79f955143177287d92bcf3832fcf","modified":1561464004000},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1561464004000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"586962e69b52ee6f6e9988547b43ee8dd489d2d4","modified":1571046251402},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1561464004000},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1561464004000},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1561464004000},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1561464004000},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1561464004000},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1561464004000},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1561464004000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1561464004000},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1561464004000},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1561464004000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1561464004000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1561464004000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1561464004000},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1561464004000},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1561464004000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1561464004000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1561464004000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1561464004000},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"af05fb29b2b4e221bc50f61c1a85bb1f8c6cab89","modified":1561464004000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1561464004000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1561464004000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1561464004000},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1561464004000},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1561464004000},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1561464004000},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1561464004000},{"_id":"themes/icarus/source/css/style.styl","hash":"be86ca71f128feea623189349355543b64b93c50","modified":1561464004000},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1561464004000},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1561464004000},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1561464004000},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1561464004000},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1561464004000},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1561464004000},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1561464004000},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1561464004000},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1561464004000},{"_id":"themes/icarus/source/js/main.js","hash":"7ff7b7fcde5f6d17e0bb5a2a6baf3633c6420c0c","modified":1561464004000},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1561464004000},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1561464004000},{"_id":"public/content.json","hash":"0e985c29f4f9e0ce8649fbda960ec2049991aeb5","modified":1571046273304},{"_id":"public/categories/index.html","hash":"08ed02a27858ecc49dcc0d87075152677a2df34b","modified":1571046276839},{"_id":"public/tags/index.html","hash":"1cdfadde266d77b181a5085e9a241b5ac2772e3d","modified":1571046276839},{"_id":"public/2019/03/13/PS傻瓜使用记录·剪切蒙版/index.html","hash":"baffbfe6bebdf9a450c0078e5e629ef136d11532","modified":1571046276839},{"_id":"public/2019/01/29/微信小程序input监听获取值/index.html","hash":"7e03973d4e1f4d647895b30e138705ae54c3382b","modified":1571046276839},{"_id":"public/2019/01/29/wechat-app/index.html","hash":"dcb1381986eae3142d6ca481c2e99b6832f48c1a","modified":1571046276839},{"_id":"public/2019/01/29/Vue.js/index.html","hash":"a7fe03ca0e92216cb719f7acf0c78b0f8853b587","modified":1571046276839},{"_id":"public/2019/01/29/docker/index.html","hash":"6882cf2891d193e2010d4c5ed549dca3bf3e56b5","modified":1571046276839},{"_id":"public/2018/12/25/Nuxt.js使用axios、自定义拦截器和代理/index.html","hash":"0bb5e48b9e0f97857fbb6a76949e36ed65607cf5","modified":1571046276839},{"_id":"public/2018/11/13/常用linux命令收集/index.html","hash":"2b847ebb0b04b1ddf86d4d5b88080ba700cee813","modified":1571046276839},{"_id":"public/2018/11/13/使用frp内网穿透/index.html","hash":"c93c172aea18f0ce0bbb60f7e7e482c3bf5bf020","modified":1571046276839},{"_id":"public/archives/index.html","hash":"dc2417f4ed2eca2b2cbb10476723f9e77b60f044","modified":1571046276839},{"_id":"public/archives/2018/index.html","hash":"85c9413cfe74f1b4745a90b8b36c5d9065c00213","modified":1571046276840},{"_id":"public/archives/2018/11/index.html","hash":"7e2ec49b97f633504b3d8eab6a2d95ee9fefddeb","modified":1571046276840},{"_id":"public/archives/2018/12/index.html","hash":"6134318789e8020d1ade7b6b817df97739fbcce3","modified":1571046276840},{"_id":"public/archives/2019/index.html","hash":"727e26908124f2b961437d438182abb147757330","modified":1571046276840},{"_id":"public/archives/2019/01/index.html","hash":"945195c7c4f8474db117f8bddca1de2c897ecb0b","modified":1571046276841},{"_id":"public/archives/2019/03/index.html","hash":"d3f2058415fe967b4771e9fb06a0b39789ecdd5d","modified":1571046276841},{"_id":"public/index.html","hash":"c4683878222b69be79279829af71135c3c0a75f7","modified":1571046276841},{"_id":"public/tags/ps/index.html","hash":"6b9d4aa3feb62fdd98afcdfc2db2eeb7d1a5eb45","modified":1571046276841},{"_id":"public/tags/剪切蒙版/index.html","hash":"70ba32d5e86331dab4406f3b426cb5f7de9bc85d","modified":1571046276841},{"_id":"public/tags/nuxt-js/index.html","hash":"99156e8ed671c89610a18d0f03533a20e2ec4d1a","modified":1571046276841},{"_id":"public/tags/nuxtjs-axios/index.html","hash":"4fabfb6a7b90e7f63d69e8638269b99748ad0f4d","modified":1571046276841},{"_id":"public/tags/proxy/index.html","hash":"b6097ff66f2eba67daf365c819a414a6aa540129","modified":1571046276841},{"_id":"public/tags/ssr/index.html","hash":"7801696c92042811eaf54edff23b81ce93b0b8f0","modified":1571046276841},{"_id":"public/tags/vuejs/index.html","hash":"efea0e65c0938534fcb525b528b815bfa06e029a","modified":1571046276841},{"_id":"public/tags/docker/index.html","hash":"9578b2bddfd44472407c6c245fb26b1468442de3","modified":1571046276841},{"_id":"public/tags/小程序/index.html","hash":"0ebb71b4b4d4271c2c596bcab5832eba335a7c1c","modified":1571046276841},{"_id":"public/tags/frp/index.html","hash":"81f0550a8328dce742fcf10bcc08b75f84294728","modified":1571046276841},{"_id":"public/tags/内网穿透/index.html","hash":"211130c1330ffa4c4f4eafaf2ce31803dac2680c","modified":1571046276842},{"_id":"public/tags/linux/index.html","hash":"a99d0a1e0a7b1f2fc0b6278fd838b558de65be6e","modified":1571046276842},{"_id":"public/tags/命令行/index.html","hash":"4d74fea977e461ddd6079a9b815fb4b69c83aa2c","modified":1571046276842},{"_id":"public/categories/Photoshop/index.html","hash":"d0deded739d2d99d0f65e03056f6bc4cc2d3a13c","modified":1571046276842},{"_id":"public/categories/Vue-js/index.html","hash":"69db5a51096d5b656b1650a15cfa805ab32d306d","modified":1571046276842},{"_id":"public/categories/容器/index.html","hash":"08b12a8ff76a99be0a795b727b1437d6ae69d9d0","modified":1571046276842},{"_id":"public/categories/小程序/index.html","hash":"f48975047fef12cf0feee64842f4026f8a5fbd27","modified":1571046276842},{"_id":"public/categories/网络应用/index.html","hash":"84fc4f517c91b84ad3ac36d9b6985645ea8b0098","modified":1571046276842},{"_id":"public/categories/服务器/index.html","hash":"b18b67f3c2479f23807b48bcfb82f244167c02a1","modified":1571046276842},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1571046276844},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1571046276844},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1571046276844},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1571046276844},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1571046276844},{"_id":"public/css/progressbar.css","hash":"8675ac15a6e7769dd95b2064bf0395b02fddec98","modified":1571046277112},{"_id":"public/css/style.css","hash":"a8ab079b1fdaee66d82680c9f341d4330748c1f1","modified":1571046277112},{"_id":"public/css/search.css","hash":"3225cb5768d5f7b7a538b8d70eea41cd334e6595","modified":1571046277112},{"_id":"public/css/back-to-top.css","hash":"4def2ba50376e309cf0a73749837e2fbb8c16230","modified":1571046277112},{"_id":"public/css/insight.css","hash":"3903b8b4f7e31c1602bfbbbe612b589d7bd08fc7","modified":1571046277112},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1571046277112},{"_id":"public/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1571046277112},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1571046277112},{"_id":"public/js/main.js","hash":"7ff7b7fcde5f6d17e0bb5a2a6baf3633c6420c0c","modified":1571046277112},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1571046277112},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1571046277112}],"Category":[{"name":"Photoshop","_id":"ck1q8dyde0004s99gqrjcky0u"},{"name":"Vue.js","_id":"ck1q8dydj0009s99gpbj9orh6"},{"name":"容器","_id":"ck1q8dydp000js99gpzx483e5"},{"name":"小程序","_id":"ck1q8dydq000ns99gqoztwk6y"},{"name":"网络应用","_id":"ck1q8dydr000ss99g4tcu5wy9"},{"name":"服务器","_id":"ck1q8dydr000xs99gpe4p7wzp"}],"Data":[],"Page":[{"title":"分类","date":"2014-12-22T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-07-02T06:03:14.449Z","path":"categories/index.html","layout":"page","_id":"ck1q8dydb0001s99gyumjajqi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2014-12-22T04:39:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-07-02T06:03:14.450Z","path":"tags/index.html","layout":"page","_id":"ck1q8dydd0003s99g2g88257n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"PS傻瓜使用记录·剪切蒙版","originContent":"> “剪切蒙版”作用是将当前图层显示在下层图层的范围内，此后移动该图层，也是以下层为显示范围。\n\n**以下有两个术语，是我自己理解的词，看懂意思即可。**\n* 内容图层：即最终需要显示的内容\n* 范围图层：给内容图层划定范围\n\n## 创建\n\n首先，创建一个形状，我选用心形\n\n![](http://g-gallery.vkleo.com/img/20190313101942.jpg)\n\n再将一张图片放入\n![](http://g-gallery.vkleo.com/img/20190313101944.jpg)\n\n在猫咪图层上右键，这个图层就是你的内容图层\n![](http://g-gallery.vkleo.com/img/20190313101945.jpg)\n\n最后结果：\n![](http://g-gallery.vkleo.com/img/20190313101943.jpg)\n\n可以看到，猫咪图层上有个折下箭头，在它下面的图层就是显示范围图层，而猫咪图层，就是内容图层。\n\n## 总结\n在当前图层创建剪切蒙版，则该图层会以其下方第一个图层作为容器，显示在下方第一个图层的形状范围内。","toc":true,"date":"2019-03-13T02:31:37.000Z","_content":"\n> “剪切蒙版”作用是将当前图层显示在下层图层的范围内，此后移动该图层，也是以下层为显示范围。\n\n<!-- more -->\n**以下有两个术语，是我自己理解的词，看懂意思即可。**\n* 内容图层：即最终需要显示的内容\n* 范围图层：给内容图层划定范围\n\n## 创建\n\n首先，创建一个形状，我选用心形\n\n![](http://g-gallery.vkleo.com/img/20190313101942.jpg)\n\n再将一张图片放入\n![](http://g-gallery.vkleo.com/img/20190313101944.jpg)\n\n在猫咪图层上右键，这个图层就是你的内容图层\n![](http://g-gallery.vkleo.com/img/20190313101945.jpg)\n\n最后结果：\n![](http://g-gallery.vkleo.com/img/20190313101943.jpg)\n\n可以看到，猫咪图层上有个折下箭头，在它下面的图层就是显示范围图层，而猫咪图层，就是内容图层。\n\n## 总结\n在当前图层创建剪切蒙版，则该图层会以其下方第一个图层作为容器，显示在下方第一个图层的形状范围内。\n\n附视频： [http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4](http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4)","source":"_posts/PS傻瓜使用记录·剪切蒙版.md","raw":"---\ntitle: PS傻瓜使用记录·剪切蒙版\ntags:\n  - ps\n  - 剪切蒙版\noriginContent: |-\n  > “剪切蒙版”作用是将当前图层显示在下层图层的范围内，此后移动该图层，也是以下层为显示范围。\n\n  **以下有两个术语，是我自己理解的词，看懂意思即可。**\n  * 内容图层：即最终需要显示的内容\n  * 范围图层：给内容图层划定范围\n\n  ## 创建\n\n  首先，创建一个形状，我选用心形\n\n  ![](http://g-gallery.vkleo.com/img/20190313101942.jpg)\n\n  再将一张图片放入\n  ![](http://g-gallery.vkleo.com/img/20190313101944.jpg)\n\n  在猫咪图层上右键，这个图层就是你的内容图层\n  ![](http://g-gallery.vkleo.com/img/20190313101945.jpg)\n\n  最后结果：\n  ![](http://g-gallery.vkleo.com/img/20190313101943.jpg)\n\n  可以看到，猫咪图层上有个折下箭头，在它下面的图层就是显示范围图层，而猫咪图层，就是内容图层。\n\n  ## 总结\n  在当前图层创建剪切蒙版，则该图层会以其下方第一个图层作为容器，显示在下方第一个图层的形状范围内。\ncategories:\n  - Photoshop\ntoc: true\ndate: 2019-03-13 10:31:37\n---\n\n> “剪切蒙版”作用是将当前图层显示在下层图层的范围内，此后移动该图层，也是以下层为显示范围。\n\n<!-- more -->\n**以下有两个术语，是我自己理解的词，看懂意思即可。**\n* 内容图层：即最终需要显示的内容\n* 范围图层：给内容图层划定范围\n\n## 创建\n\n首先，创建一个形状，我选用心形\n\n![](http://g-gallery.vkleo.com/img/20190313101942.jpg)\n\n再将一张图片放入\n![](http://g-gallery.vkleo.com/img/20190313101944.jpg)\n\n在猫咪图层上右键，这个图层就是你的内容图层\n![](http://g-gallery.vkleo.com/img/20190313101945.jpg)\n\n最后结果：\n![](http://g-gallery.vkleo.com/img/20190313101943.jpg)\n\n可以看到，猫咪图层上有个折下箭头，在它下面的图层就是显示范围图层，而猫咪图层，就是内容图层。\n\n## 总结\n在当前图层创建剪切蒙版，则该图层会以其下方第一个图层作为容器，显示在下方第一个图层的形状范围内。\n\n附视频： [http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4](http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4)","slug":"PS傻瓜使用记录·剪切蒙版","published":1,"updated":"2019-07-02T06:39:15.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dyd70000s99gip1cntw7","content":"<blockquote><p>“剪切蒙版”作用是将当前图层显示在下层图层的范围内，此后移动该图层，也是以下层为显示范围。</p></blockquote><a id=\"more\"></a><p><strong>以下有两个术语，是我自己理解的词，看懂意思即可。</strong></p><ul><li>内容图层：即最终需要显示的内容</li><li>范围图层：给内容图层划定范围</li></ul><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>首先，创建一个形状，我选用心形</p><p><img src=\"http://g-gallery.vkleo.com/img/20190313101942.jpg\" alt></p><p>再将一张图片放入<br><img src=\"http://g-gallery.vkleo.com/img/20190313101944.jpg\" alt></p><p>在猫咪图层上右键，这个图层就是你的内容图层<br><img src=\"http://g-gallery.vkleo.com/img/20190313101945.jpg\" alt></p><p>最后结果：<br><img src=\"http://g-gallery.vkleo.com/img/20190313101943.jpg\" alt></p><p>可以看到，猫咪图层上有个折下箭头，在它下面的图层就是显示范围图层，而猫咪图层，就是内容图层。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在当前图层创建剪切蒙版，则该图层会以其下方第一个图层作为容器，显示在下方第一个图层的形状范围内。</p><p>附视频： <a href=\"http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4\" target=\"_blank\" rel=\"noopener\">http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>“剪切蒙版”作用是将当前图层显示在下层图层的范围内，此后移动该图层，也是以下层为显示范围。</p></blockquote>","more":"<p><strong>以下有两个术语，是我自己理解的词，看懂意思即可。</strong></p><ul><li>内容图层：即最终需要显示的内容</li><li>范围图层：给内容图层划定范围</li></ul><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>首先，创建一个形状，我选用心形</p><p><img src=\"http://g-gallery.vkleo.com/img/20190313101942.jpg\" alt></p><p>再将一张图片放入<br><img src=\"http://g-gallery.vkleo.com/img/20190313101944.jpg\" alt></p><p>在猫咪图层上右键，这个图层就是你的内容图层<br><img src=\"http://g-gallery.vkleo.com/img/20190313101945.jpg\" alt></p><p>最后结果：<br><img src=\"http://g-gallery.vkleo.com/img/20190313101943.jpg\" alt></p><p>可以看到，猫咪图层上有个折下箭头，在它下面的图层就是显示范围图层，而猫咪图层，就是内容图层。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在当前图层创建剪切蒙版，则该图层会以其下方第一个图层作为容器，显示在下方第一个图层的形状范围内。</p><p>附视频： <a href=\"http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4\" target=\"_blank\" rel=\"noopener\">http://gallery.vkleo.com/video/ps/ps-clipping-mask.mp4</a></p>"},{"title":"Nuxt.js使用axios、自定义拦截器和代理","originContent":"# ssh拷贝文件\n```\n  在nuxt.js (ssr)中使用axios，或者自定义请求/返回的拦截器，以及配置跨域代理\n```","toc":true,"date":"2018-12-25T04:22:49.000Z","_content":"\n> 在`nuxt.js`下使用`@nuxtjs/axios`自定义拦截器\n\n<!-- more -->\n\n# @nuxtjs/axios使用\n## 说明\n**本文基于nuxt-create-app**\n\n> nuxt.js中使用`@nuxtjs/axios`，其已封装了一些方法，例如：\n```ts\nimport { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport Vue from 'vue'\n\ninterface NuxtAxiosInstance extends AxiosInstance {\n  $request<T = any>(config: AxiosRequestConfig): Promise<T>\n  $get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $head<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $options<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>\n  $put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>\n  $patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>\n}\n\ndeclare module 'vue/types/vue' {\n  interface Vue {\n    $axios: NuxtAxiosInstance\n  }\n}\n```\n\n在不改变任何东西的情况下，直接在页面或组件中使用是可以的：\n```js\n async getHomeSwiper() {\n    try {\n    \n      // 默认拦截器返回response中的data\n      let res = await this.$axios.$get('/index')\n    } catch (e) {\n      throw Error(e)\n    }\n}\n```\n\n## 使用自定义拦截器\n\n**文档: [https://axios.nuxtjs.org/extend](https://axios.nuxtjs.org/extend)**\n\n### 一、创建文件\n\n先看官方说明\n![image](https://note.youdao.com/yws/api/personal/file/F374023FB44D442AA53F95C309D1DE4E?method=download&shareKey=26ab2a90ca9ab183756085ceb9a6fcfa)\n\n**其中说，这些回调是没必要有返回的，但我们或许可以根据需要做一些自定义的返回**\n\n创建`plugins/axios.js`，内容如下：\n```js\nexport default function({ $axios }) {\n  //请求回调\n  $axios.onRequest(config => {\n    console.log('Making request to ' + config.url)\n  })\n  //返回结果回调\n  $axios.onResponse(res => {\n    // 自定义返回数据\n    let { status, statusText, data } = res\n    return { status, statusText, data }\n  })\n  //错误拦截器\n  $axios.onError(error => {\n    const code = parseInt(error.response && error.response.status)\n    if (code === 400) {\n      redirect('/400')\n    }\n  })\n}\n```\n\n### 二、修改`nuxt.config.js`\n\n```js\nplugins:[\n    { src: '~/plugins/axios', ssr: false }\n]\n```\n\n### 三、使用和差异\n\n#### 1、使用默认的`$get`方法\n```js\nlet res=await this.$axios.$get('/')\n// 此方法只会返回data，自定义的拦截器返回是对它木有影响的\n```\n\n#### 2、非默认方法\n```js\nlet res=await this.$axios({\n    url:'/'\n})\n// 此方法返回 {status:200,statusText:\"ok\",data:[]}，获取了我们自定义的拦截器返回数据\n```\n\n# 代理(proxy)，解决跨域问题\n\n> 查了很多资料说要用`@nuxtjs/proxy`，但我安装最新版的nuxt.js，选择了axios以后，只有@nuxtjs/axios的情况下，使用`proxy`还是阔以的\n\n```js\n  axios:\n    {\n      // See https://github.com/nuxt-community/axios-module#options\n      proxy: true,\n      // prefix: '/mock',   //加入此，会自动加入前缀，否则得手动/mock/xxx\n      credentials: true,\n      debug:true,\n    },\n\n  proxy: {\n    '/mock': {\n      target: 'https://easy-mock.com',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/mock': ''\n      }\n    }\n  },\n```\n## 使用\n```js\nlet res=await this.$axios({\n    url:'/mock/test'\n})\n```\n至此，使用`nuxt-create-app`安装的项目，几乎不需要另外安装其他就可使用axios代理。\n\n另外，其实mock是不用代理的，毕竟又没有跨域问题，这里一并处理，只是希望在代理处统一管理而已。\n\n# 总结\n\n其实还有更好的优化，但目前为止，这样是可以用的，以后优化会放出","source":"_posts/Nuxt.js使用axios、自定义拦截器和代理.md","raw":"---\ntitle: Nuxt.js使用axios、自定义拦截器和代理\ntags:\n  - nuxt.js\n  - '@nuxtjs/axios'\n  - proxy\n  - ssr\noriginContent: |-\n  # ssh拷贝文件\n  ```\n    在nuxt.js (ssr)中使用axios，或者自定义请求/返回的拦截器，以及配置跨域代理\n  ```\ncategories:\n  - Vue.js\ntoc: true\ndate: 2018-12-25 12:22:49\n---\n\n> 在`nuxt.js`下使用`@nuxtjs/axios`自定义拦截器\n\n<!-- more -->\n\n# @nuxtjs/axios使用\n## 说明\n**本文基于nuxt-create-app**\n\n> nuxt.js中使用`@nuxtjs/axios`，其已封装了一些方法，例如：\n```ts\nimport { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport Vue from 'vue'\n\ninterface NuxtAxiosInstance extends AxiosInstance {\n  $request<T = any>(config: AxiosRequestConfig): Promise<T>\n  $get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $head<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $options<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>\n  $post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>\n  $put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>\n  $patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>\n}\n\ndeclare module 'vue/types/vue' {\n  interface Vue {\n    $axios: NuxtAxiosInstance\n  }\n}\n```\n\n在不改变任何东西的情况下，直接在页面或组件中使用是可以的：\n```js\n async getHomeSwiper() {\n    try {\n    \n      // 默认拦截器返回response中的data\n      let res = await this.$axios.$get('/index')\n    } catch (e) {\n      throw Error(e)\n    }\n}\n```\n\n## 使用自定义拦截器\n\n**文档: [https://axios.nuxtjs.org/extend](https://axios.nuxtjs.org/extend)**\n\n### 一、创建文件\n\n先看官方说明\n![image](https://note.youdao.com/yws/api/personal/file/F374023FB44D442AA53F95C309D1DE4E?method=download&shareKey=26ab2a90ca9ab183756085ceb9a6fcfa)\n\n**其中说，这些回调是没必要有返回的，但我们或许可以根据需要做一些自定义的返回**\n\n创建`plugins/axios.js`，内容如下：\n```js\nexport default function({ $axios }) {\n  //请求回调\n  $axios.onRequest(config => {\n    console.log('Making request to ' + config.url)\n  })\n  //返回结果回调\n  $axios.onResponse(res => {\n    // 自定义返回数据\n    let { status, statusText, data } = res\n    return { status, statusText, data }\n  })\n  //错误拦截器\n  $axios.onError(error => {\n    const code = parseInt(error.response && error.response.status)\n    if (code === 400) {\n      redirect('/400')\n    }\n  })\n}\n```\n\n### 二、修改`nuxt.config.js`\n\n```js\nplugins:[\n    { src: '~/plugins/axios', ssr: false }\n]\n```\n\n### 三、使用和差异\n\n#### 1、使用默认的`$get`方法\n```js\nlet res=await this.$axios.$get('/')\n// 此方法只会返回data，自定义的拦截器返回是对它木有影响的\n```\n\n#### 2、非默认方法\n```js\nlet res=await this.$axios({\n    url:'/'\n})\n// 此方法返回 {status:200,statusText:\"ok\",data:[]}，获取了我们自定义的拦截器返回数据\n```\n\n# 代理(proxy)，解决跨域问题\n\n> 查了很多资料说要用`@nuxtjs/proxy`，但我安装最新版的nuxt.js，选择了axios以后，只有@nuxtjs/axios的情况下，使用`proxy`还是阔以的\n\n```js\n  axios:\n    {\n      // See https://github.com/nuxt-community/axios-module#options\n      proxy: true,\n      // prefix: '/mock',   //加入此，会自动加入前缀，否则得手动/mock/xxx\n      credentials: true,\n      debug:true,\n    },\n\n  proxy: {\n    '/mock': {\n      target: 'https://easy-mock.com',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/mock': ''\n      }\n    }\n  },\n```\n## 使用\n```js\nlet res=await this.$axios({\n    url:'/mock/test'\n})\n```\n至此，使用`nuxt-create-app`安装的项目，几乎不需要另外安装其他就可使用axios代理。\n\n另外，其实mock是不用代理的，毕竟又没有跨域问题，这里一并处理，只是希望在代理处统一管理而已。\n\n# 总结\n\n其实还有更好的优化，但目前为止，这样是可以用的，以后优化会放出","slug":"Nuxt.js使用axios、自定义拦截器和代理","published":1,"updated":"2019-07-02T06:45:23.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydc0002s99gi9cls74v","content":"<blockquote><p>在<code>nuxt.js</code>下使用<code>@nuxtjs/axios</code>自定义拦截器</p></blockquote><a id=\"more\"></a><h1 id=\"nuxtjs-axios使用\"><a href=\"#nuxtjs-axios使用\" class=\"headerlink\" title=\"@nuxtjs/axios使用\"></a>@nuxtjs/axios使用</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p><strong>本文基于nuxt-create-app</strong></p><blockquote><p>nuxt.js中使用<code>@nuxtjs/axios</code>，其已封装了一些方法，例如：<br></p><figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; AxiosInstance, AxiosRequestConfig &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> NuxtAxiosInstance <span class=\"hljs-keyword\">extends</span> AxiosInstance &#123;</span><br><span class=\"line\">  $request&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(config: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $<span class=\"hljs-keyword\">get</span>&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $<span class=\"hljs-keyword\">delete</span>&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $head&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $options&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $post&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, data?: <span class=\"hljs-built_in\">any</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $put&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, data?: <span class=\"hljs-built_in\">any</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $patch&lt;T = <span class=\"hljs-built_in\">any</span>&gt;(url: <span class=\"hljs-built_in\">string</span>, data?: <span class=\"hljs-built_in\">any</span>, config?: AxiosRequestConfig): <span class=\"hljs-built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">module</span> 'vue/types/vue' &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">interface</span> Vue &#123;</span><br><span class=\"line\">    $axios: NuxtAxiosInstance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><p>在不改变任何东西的情况下，直接在页面或组件中使用是可以的：<br></p><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"hljs-keyword\">async</span> getHomeSwiper() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"hljs-comment\">// 默认拦截器返回response中的data</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.$axios.$<span class=\"hljs-keyword\">get</span>('/index')</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"使用自定义拦截器\"><a href=\"#使用自定义拦截器\" class=\"headerlink\" title=\"使用自定义拦截器\"></a>使用自定义拦截器</h2><p><strong>文档: <a href=\"https://axios.nuxtjs.org/extend\" target=\"_blank\" rel=\"noopener\">https://axios.nuxtjs.org/extend</a></strong></p><h3 id=\"一、创建文件\"><a href=\"#一、创建文件\" class=\"headerlink\" title=\"一、创建文件\"></a>一、创建文件</h3><p>先看官方说明<br><img src=\"https://note.youdao.com/yws/api/personal/file/F374023FB44D442AA53F95C309D1DE4E?method=download&amp;shareKey=26ab2a90ca9ab183756085ceb9a6fcfa\" alt=\"image\"></p><p><strong>其中说，这些回调是没必要有返回的，但我们或许可以根据需要做一些自定义的返回</strong></p><p>创建<code>plugins/axios.js</code>，内容如下：<br></p><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">&#123; $axios &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">//请求回调</span></span><br><span class=\"line\">  $axios.onRequest(<span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Making request to '</span> + config.url)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"hljs-comment\">//返回结果回调</span></span><br><span class=\"line\">  $axios.onResponse(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 自定义返回数据</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> &#123; status, statusText, data &#125; = res</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> &#123; status, statusText, data &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"hljs-comment\">//错误拦截器</span></span><br><span class=\"line\">  $axios.onError(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> code = <span class=\"hljs-built_in\">parseInt</span>(error.response &amp;&amp; error.response.status)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (code === <span class=\"hljs-number\">400</span>) &#123;</span><br><span class=\"line\">      redirect(<span class=\"hljs-string\">'/400'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"二、修改nuxt-config-js\"><a href=\"#二、修改nuxt-config-js\" class=\"headerlink\" title=\"二、修改nuxt.config.js\"></a>二、修改<code>nuxt.config.js</code></h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:[</span><br><span class=\"line\">    &#123; <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'~/plugins/axios'</span>, <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><h3 id=\"三、使用和差异\"><a href=\"#三、使用和差异\" class=\"headerlink\" title=\"三、使用和差异\"></a>三、使用和差异</h3><h4 id=\"1、使用默认的-get方法\"><a href=\"#1、使用默认的-get方法\" class=\"headerlink\" title=\"1、使用默认的$get方法\"></a>1、使用默认的<code>$get</code>方法</h4><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.$axios.$<span class=\"hljs-keyword\">get</span>('/')</span><br><span class=\"line\">// 此方法只会返回data，自定义的拦截器返回是对它木有影响的</span><br></pre></td></tr></table></figure><h4 id=\"2、非默认方法\"><a href=\"#2、非默认方法\" class=\"headerlink\" title=\"2、非默认方法\"></a>2、非默认方法</h4><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.$axios(&#123;</span><br><span class=\"line\">    url:<span class=\"hljs-string\">'/'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"hljs-comment\">// 此方法返回 &#123;status:200,statusText:\"ok\",data:[]&#125;，获取了我们自定义的拦截器返回数据</span></span><br></pre></td></tr></table></figure><h1 id=\"代理-proxy-，解决跨域问题\"><a href=\"#代理-proxy-，解决跨域问题\" class=\"headerlink\" title=\"代理(proxy)，解决跨域问题\"></a>代理(proxy)，解决跨域问题</h1><blockquote><p>查了很多资料说要用<code>@nuxtjs/proxy</code>，但我安装最新版的nuxt.js，选择了axios以后，只有@nuxtjs/axios的情况下，使用<code>proxy</code>还是阔以的</p></blockquote><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// See https://github.com/nuxt-community/axios-module#options</span></span><br><span class=\"line\">    proxy: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">// prefix: '/mock',   //加入此，会自动加入前缀，否则得手动/mock/xxx</span></span><br><span class=\"line\">    credentials: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    debug:<span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">'/mock'</span>: &#123;</span><br><span class=\"line\">    target: <span class=\"hljs-string\">'https://easy-mock.com'</span>,</span><br><span class=\"line\">    changeOrigin: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">      <span class=\"hljs-string\">'^/mock'</span>: <span class=\"hljs-string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.$axios(&#123;</span><br><span class=\"line\">    url:<span class=\"hljs-string\">'/mock/test'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>至此，使用<code>nuxt-create-app</code>安装的项目，几乎不需要另外安装其他就可使用axios代理。</p><p>另外，其实mock是不用代理的，毕竟又没有跨域问题，这里一并处理，只是希望在代理处统一管理而已。</p><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实还有更好的优化，但目前为止，这样是可以用的，以后优化会放出</p>","site":{"data":{}},"excerpt":"<blockquote><p>在<code>nuxt.js</code>下使用<code>@nuxtjs/axios</code>自定义拦截器</p></blockquote>","more":"<h1 id=\"nuxtjs-axios使用\"><a href=\"#nuxtjs-axios使用\" class=\"headerlink\" title=\"@nuxtjs/axios使用\"></a>@nuxtjs/axios使用</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p><strong>本文基于nuxt-create-app</strong></p><blockquote><p>nuxt.js中使用<code>@nuxtjs/axios</code>，其已封装了一些方法，例如：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AxiosInstance, AxiosRequestConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> NuxtAxiosInstance <span class=\"keyword\">extends</span> AxiosInstance &#123;</span><br><span class=\"line\">  $request&lt;T = <span class=\"built_in\">any</span>&gt;(config: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $<span class=\"keyword\">get</span>&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $<span class=\"keyword\">delete</span>&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $head&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $options&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $post&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $put&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">  $patch&lt;T = <span class=\"built_in\">any</span>&gt;(url: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: AxiosRequestConfig): <span class=\"built_in\">Promise</span>&lt;T&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> 'vue/types/vue' &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> Vue &#123;</span><br><span class=\"line\">    $axios: NuxtAxiosInstance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><p>在不改变任何东西的情况下，直接在页面或组件中使用是可以的：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">async</span> getHomeSwiper() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 默认拦截器返回response中的data</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$axios.$<span class=\"keyword\">get</span>('/index')</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"使用自定义拦截器\"><a href=\"#使用自定义拦截器\" class=\"headerlink\" title=\"使用自定义拦截器\"></a>使用自定义拦截器</h2><p><strong>文档: <a href=\"https://axios.nuxtjs.org/extend\" target=\"_blank\" rel=\"noopener\">https://axios.nuxtjs.org/extend</a></strong></p><h3 id=\"一、创建文件\"><a href=\"#一、创建文件\" class=\"headerlink\" title=\"一、创建文件\"></a>一、创建文件</h3><p>先看官方说明<br><img src=\"https://note.youdao.com/yws/api/personal/file/F374023FB44D442AA53F95C309D1DE4E?method=download&amp;shareKey=26ab2a90ca9ab183756085ceb9a6fcfa\" alt=\"image\"></p><p><strong>其中说，这些回调是没必要有返回的，但我们或许可以根据需要做一些自定义的返回</strong></p><p>创建<code>plugins/axios.js</code>，内容如下：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; $axios &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//请求回调</span></span><br><span class=\"line\">  $axios.onRequest(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Making request to '</span> + config.url)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">//返回结果回调</span></span><br><span class=\"line\">  $axios.onResponse(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义返回数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; status, statusText, data &#125; = res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; status, statusText, data &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">//错误拦截器</span></span><br><span class=\"line\">  $axios.onError(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> code = <span class=\"built_in\">parseInt</span>(error.response &amp;&amp; error.response.status)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (code === <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">      redirect(<span class=\"string\">'/400'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"二、修改nuxt-config-js\"><a href=\"#二、修改nuxt-config-js\" class=\"headerlink\" title=\"二、修改nuxt.config.js\"></a>二、修改<code>nuxt.config.js</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:[</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/axios'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><h3 id=\"三、使用和差异\"><a href=\"#三、使用和差异\" class=\"headerlink\" title=\"三、使用和差异\"></a>三、使用和差异</h3><h4 id=\"1、使用默认的-get方法\"><a href=\"#1、使用默认的-get方法\" class=\"headerlink\" title=\"1、使用默认的$get方法\"></a>1、使用默认的<code>$get</code>方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res=<span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$axios.$<span class=\"keyword\">get</span>('/')</span><br><span class=\"line\">// 此方法只会返回data，自定义的拦截器返回是对它木有影响的</span><br></pre></td></tr></table></figure><h4 id=\"2、非默认方法\"><a href=\"#2、非默认方法\" class=\"headerlink\" title=\"2、非默认方法\"></a>2、非默认方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res=<span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$axios(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'/'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 此方法返回 &#123;status:200,statusText:\"ok\",data:[]&#125;，获取了我们自定义的拦截器返回数据</span></span><br></pre></td></tr></table></figure><h1 id=\"代理-proxy-，解决跨域问题\"><a href=\"#代理-proxy-，解决跨域问题\" class=\"headerlink\" title=\"代理(proxy)，解决跨域问题\"></a>代理(proxy)，解决跨域问题</h1><blockquote><p>查了很多资料说要用<code>@nuxtjs/proxy</code>，但我安装最新版的nuxt.js，选择了axios以后，只有@nuxtjs/axios的情况下，使用<code>proxy</code>还是阔以的</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://github.com/nuxt-community/axios-module#options</span></span><br><span class=\"line\">    proxy: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// prefix: '/mock',   //加入此，会自动加入前缀，否则得手动/mock/xxx</span></span><br><span class=\"line\">    credentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    debug:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">  <span class=\"string\">'/mock'</span>: &#123;</span><br><span class=\"line\">    target: <span class=\"string\">'https://easy-mock.com'</span>,</span><br><span class=\"line\">    changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">      <span class=\"string\">'^/mock'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res=<span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$axios(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'/mock/test'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>至此，使用<code>nuxt-create-app</code>安装的项目，几乎不需要另外安装其他就可使用axios代理。</p><p>另外，其实mock是不用代理的，毕竟又没有跨域问题，这里一并处理，只是希望在代理处统一管理而已。</p><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实还有更好的优化，但目前为止，这样是可以用的，以后优化会放出</p>"},{"title":"Vue组件传值","originContent":"","toc":true,"date":"2019-01-29T08:47:52.000Z","_content":"\n# 说明\n\n最近需要制作这么一个业务：\n\n使用element-ui的dialog，封装为一个登录面板组件，在`Navbar.vue`组件中调用，当点击`Navbar`中的`登录`按钮时，弹出登录面板，点击面板中的`取消`按钮，或者点击背景、点击自带关闭按钮时，关闭登录面板。\n\n<!-- more -->\n\n但直接调用`props`内的属性作为`visible.sync`的值，不管如何在点击自带关闭按钮或背景关闭时，就会报错：\n\n::: danger Console错误提示\n[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \"visible\"\n:::\n\n先上一篇我查到的类似错误的文章：[https://www.cnblogs.com/yeqrblog/p/9141701.html](https://www.cnblogs.com/yeqrblog/p/9141701.html)\n\n**先感谢大佬！**\n\n<!-- more -->\n\n和大佬第二个方法有点区别，我用到了`watch`，现在我的做法是：\n1. 用子组件自定义一个data作为`visible.sync`值，并监听`props`的值\n2. 父组件只管传入值，并在组件调用上`v-on`一个事件，暂定为`close`\n3. 子组件中，给dialog自带的`close`方法绑定一个关闭方法，关闭方法使用`this.$emit('close',false)`触发父组件上绑定在调用子组件上的`v-on:close`事件\n\n\n## 知识点\n1. vue components\n2. props:[]\n3. this.$emit()\n\n# 父组件\n```html\n<template>\n\n<div>\n <SignPanel :is-show=\"signPanelActive\" @close=\"close\"></SignPanel>\n</div>\n\n</template>\n<script>\nimport SignPanel from './SignPanel'\n\nexport default {\n    data() {\n            return {\n                signPanelActive: false,\n            }\n        },\n        components: {\n            SignPanel\n        },\n\n        methods: {\n            close() {\n                this.signPanelActive = false\n            },\n        }\n}\n</script>\n```\n\n# 子组件\n\n```html\n<template>\n    <!--登录注册面板-->\n    <el-dialog \n        class=\"bg-third cm-sign-panel\" \n        title=\"\" \n        :visible.sync=\"active\"  \n        @close=\"close\">\n\n        <p>这里是登录面板</p>\n\n        <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"close\">关闭</el-button>\n        </div>\n    </el-dialog>\n</template>\n<script lang=\"ts\">\n    export default {\n        props: {\n            isShow: Boolean\n        },\n        data() {\n            return {\n                active: false\n            }\n        },\n        watch: {\n            isShow: function () {\n                this.active = this.isShow\n            },\n        },\n        methods: {\n            close() {\n                this.$emit('close', false)\n            },\n        }\n    }\n</script>\n```\n\n# 总结\n\n该做法是子组件只负责给父组件丢回绑定事件和返回值，其他属性由自身`watch`， 打完收工！","source":"_posts/Vue.js.md","raw":"---\ntitle: Vue组件传值\ntags:\n  - vuejs\noriginContent: ''\ncategories:\n  - Vue.js\ntoc: true\ndate: 2019-01-29 16:47:52\n---\n\n# 说明\n\n最近需要制作这么一个业务：\n\n使用element-ui的dialog，封装为一个登录面板组件，在`Navbar.vue`组件中调用，当点击`Navbar`中的`登录`按钮时，弹出登录面板，点击面板中的`取消`按钮，或者点击背景、点击自带关闭按钮时，关闭登录面板。\n\n<!-- more -->\n\n但直接调用`props`内的属性作为`visible.sync`的值，不管如何在点击自带关闭按钮或背景关闭时，就会报错：\n\n::: danger Console错误提示\n[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \"visible\"\n:::\n\n先上一篇我查到的类似错误的文章：[https://www.cnblogs.com/yeqrblog/p/9141701.html](https://www.cnblogs.com/yeqrblog/p/9141701.html)\n\n**先感谢大佬！**\n\n<!-- more -->\n\n和大佬第二个方法有点区别，我用到了`watch`，现在我的做法是：\n1. 用子组件自定义一个data作为`visible.sync`值，并监听`props`的值\n2. 父组件只管传入值，并在组件调用上`v-on`一个事件，暂定为`close`\n3. 子组件中，给dialog自带的`close`方法绑定一个关闭方法，关闭方法使用`this.$emit('close',false)`触发父组件上绑定在调用子组件上的`v-on:close`事件\n\n\n## 知识点\n1. vue components\n2. props:[]\n3. this.$emit()\n\n# 父组件\n```html\n<template>\n\n<div>\n <SignPanel :is-show=\"signPanelActive\" @close=\"close\"></SignPanel>\n</div>\n\n</template>\n<script>\nimport SignPanel from './SignPanel'\n\nexport default {\n    data() {\n            return {\n                signPanelActive: false,\n            }\n        },\n        components: {\n            SignPanel\n        },\n\n        methods: {\n            close() {\n                this.signPanelActive = false\n            },\n        }\n}\n</script>\n```\n\n# 子组件\n\n```html\n<template>\n    <!--登录注册面板-->\n    <el-dialog \n        class=\"bg-third cm-sign-panel\" \n        title=\"\" \n        :visible.sync=\"active\"  \n        @close=\"close\">\n\n        <p>这里是登录面板</p>\n\n        <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"close\">关闭</el-button>\n        </div>\n    </el-dialog>\n</template>\n<script lang=\"ts\">\n    export default {\n        props: {\n            isShow: Boolean\n        },\n        data() {\n            return {\n                active: false\n            }\n        },\n        watch: {\n            isShow: function () {\n                this.active = this.isShow\n            },\n        },\n        methods: {\n            close() {\n                this.$emit('close', false)\n            },\n        }\n    }\n</script>\n```\n\n# 总结\n\n该做法是子组件只负责给父组件丢回绑定事件和返回值，其他属性由自身`watch`， 打完收工！","slug":"Vue.js","published":1,"updated":"2019-07-02T06:43:01.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydg0006s99gndv03ljg","content":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>最近需要制作这么一个业务：</p><p>使用element-ui的dialog，封装为一个登录面板组件，在<code>Navbar.vue</code>组件中调用，当点击<code>Navbar</code>中的<code>登录</code>按钮时，弹出登录面板，点击面板中的<code>取消</code>按钮，或者点击背景、点击自带关闭按钮时，关闭登录面板。</p><a id=\"more\"></a><p>但直接调用<code>props</code>内的属性作为<code>visible.sync</code>的值，不管如何在点击自带关闭按钮或背景关闭时，就会报错：</p><p>::: danger Console错误提示<br>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “visible”<br>:::</p><p>先上一篇我查到的类似错误的文章：<a href=\"https://www.cnblogs.com/yeqrblog/p/9141701.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yeqrblog/p/9141701.html</a></p><p><strong>先感谢大佬！</strong></p><!-- more --><p>和大佬第二个方法有点区别，我用到了<code>watch</code>，现在我的做法是：</p><ol><li>用子组件自定义一个data作为<code>visible.sync</code>值，并监听<code>props</code>的值</li><li>父组件只管传入值，并在组件调用上<code>v-on</code>一个事件，暂定为<code>close</code></li><li>子组件中，给dialog自带的<code>close</code>方法绑定一个关闭方法，关闭方法使用<code>this.$emit(&#39;close&#39;,false)</code>触发父组件上绑定在调用子组件上的<code>v-on:close</code>事件</li></ol><h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol><li>vue components</li><li>props:[]</li><li>this.$emit()</li></ol><h1 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h1><figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SignPanel</span> <span class=\"hljs-attr\">:is-show</span>=<span class=\"hljs-string\">\"signPanelActive\"</span> @<span class=\"hljs-attr\">close</span>=<span class=\"hljs-string\">\"close\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SignPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\"><span class=\"hljs-keyword\">import</span> SignPanel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./SignPanel'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"hljs-javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">                signPanelActive: <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">            SignPanel</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            close() &#123;</span><br><span class=\"line\"><span class=\"hljs-javascript\">                <span class=\"hljs-keyword\">this</span>.signPanelActive = <span class=\"hljs-literal\">false</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h1><figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">&lt;!--登录注册面板--&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-dialog</span> </span></span><br><span class=\"line\"><span class=\"hljs-tag\">        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-third cm-sign-panel\"</span> </span></span><br><span class=\"line\"><span class=\"hljs-tag\">        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"\"</span> </span></span><br><span class=\"line\"><span class=\"hljs-tag\">        <span class=\"hljs-attr\">:visible.sync</span>=<span class=\"hljs-string\">\"active\"</span>  </span></span><br><span class=\"line\"><span class=\"hljs-tag\">        @<span class=\"hljs-attr\">close</span>=<span class=\"hljs-string\">\"close\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这里是登录面板<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"footer\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"dialog-footer\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"close\"</span>&gt;</span>关闭<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-dialog</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\"><span class=\"hljs-javascript\">            isShow: <span class=\"hljs-built_in\">Boolean</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\"><span class=\"hljs-javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">                active: <span class=\"hljs-literal\">false</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\"><span class=\"hljs-javascript\">            isShow: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">                <span class=\"hljs-keyword\">this</span>.active = <span class=\"hljs-keyword\">this</span>.isShow</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            close() &#123;</span><br><span class=\"line\"><span class=\"hljs-javascript\">                <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-literal\">false</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>该做法是子组件只负责给父组件丢回绑定事件和返回值，其他属性由自身<code>watch</code>， 打完收工！</p>","site":{"data":{}},"excerpt":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>最近需要制作这么一个业务：</p><p>使用element-ui的dialog，封装为一个登录面板组件，在<code>Navbar.vue</code>组件中调用，当点击<code>Navbar</code>中的<code>登录</code>按钮时，弹出登录面板，点击面板中的<code>取消</code>按钮，或者点击背景、点击自带关闭按钮时，关闭登录面板。</p>","more":"<p>但直接调用<code>props</code>内的属性作为<code>visible.sync</code>的值，不管如何在点击自带关闭按钮或背景关闭时，就会报错：</p><p>::: danger Console错误提示<br>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “visible”<br>:::</p><p>先上一篇我查到的类似错误的文章：<a href=\"https://www.cnblogs.com/yeqrblog/p/9141701.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yeqrblog/p/9141701.html</a></p><p><strong>先感谢大佬！</strong></p><!-- more --><p>和大佬第二个方法有点区别，我用到了<code>watch</code>，现在我的做法是：</p><ol><li>用子组件自定义一个data作为<code>visible.sync</code>值，并监听<code>props</code>的值</li><li>父组件只管传入值，并在组件调用上<code>v-on</code>一个事件，暂定为<code>close</code></li><li>子组件中，给dialog自带的<code>close</code>方法绑定一个关闭方法，关闭方法使用<code>this.$emit(&#39;close&#39;,false)</code>触发父组件上绑定在调用子组件上的<code>v-on:close</code>事件</li></ol><h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol><li>vue components</li><li>props:[]</li><li>this.$emit()</li></ol><h1 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">SignPanel</span> <span class=\"attr\">:is-show</span>=<span class=\"string\">\"signPanelActive\"</span> @<span class=\"attr\">close</span>=<span class=\"string\">\"close\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SignPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> SignPanel <span class=\"keyword\">from</span> <span class=\"string\">'./SignPanel'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                signPanelActive: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">            SignPanel</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            close() &#123;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">this</span>.signPanelActive = <span class=\"literal\">false</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--登录注册面板--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-dialog</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"bg-third cm-sign-panel\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:visible.sync</span>=<span class=\"string\">\"active\"</span>  </span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">close</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是登录面板<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dialog-footer\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"close\"</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"ts\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            isShow: <span class=\"built_in\">Boolean</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                active: <span class=\"literal\">false</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            isShow: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">this</span>.active = <span class=\"keyword\">this</span>.isShow</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            close() &#123;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'close'</span>, <span class=\"literal\">false</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>该做法是子组件只负责给父组件丢回绑定事件和返回值，其他属性由自身<code>watch</code>， 打完收工！</p>"},{"title":"docker 命令记录","originContent":"","toc":true,"date":"2019-01-29T08:44:38.000Z","_content":"> docker 常用命令近路\n\n<!-- more -->\n\n# 进入容器bash\n```\ndocker exec -it [container_name] /bin/bash\n```\n\n# 查询IP\n```\ndocker inspect [container_name] | grep \"IPAddress\"\n```\n# 容器热重载\n```\ndocker exec -i [container_name] /usr/sbin/nginx -s reload\n```","source":"_posts/docker.md","raw":"---\ntitle: docker 命令记录\ntags:\n  - docker\noriginContent: ''\ncategories:\n  - 容器\ntoc: true\ndate: 2019-01-29 16:44:38\n---\n> docker 常用命令近路\n\n<!-- more -->\n\n# 进入容器bash\n```\ndocker exec -it [container_name] /bin/bash\n```\n\n# 查询IP\n```\ndocker inspect [container_name] | grep \"IPAddress\"\n```\n# 容器热重载\n```\ndocker exec -i [container_name] /usr/sbin/nginx -s reload\n```","slug":"docker","published":1,"updated":"2019-07-02T06:44:44.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydh0007s99glxmon92u","content":"<blockquote><p>docker 常用命令近路</p></blockquote><a id=\"more\"></a><h1 id=\"进入容器bash\"><a href=\"#进入容器bash\" class=\"headerlink\" title=\"进入容器bash\"></a>进入容器bash</h1><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it [container_name] /bin/bash</span><br></pre></td></tr></table></figure><h1 id=\"查询IP\"><a href=\"#查询IP\" class=\"headerlink\" title=\"查询IP\"></a>查询IP</h1><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect [container_name] | grep &quot;IPAddress&quot;</span><br></pre></td></tr></table></figure><h1 id=\"容器热重载\"><a href=\"#容器热重载\" class=\"headerlink\" title=\"容器热重载\"></a>容器热重载</h1><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -i [container_name] /usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote><p>docker 常用命令近路</p></blockquote>","more":"<h1 id=\"进入容器bash\"><a href=\"#进入容器bash\" class=\"headerlink\" title=\"进入容器bash\"></a>进入容器bash</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it [container_name] /bin/bash</span><br></pre></td></tr></table></figure><h1 id=\"查询IP\"><a href=\"#查询IP\" class=\"headerlink\" title=\"查询IP\"></a>查询IP</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect [container_name] | grep &quot;IPAddress&quot;</span><br></pre></td></tr></table></figure><h1 id=\"容器热重载\"><a href=\"#容器热重载\" class=\"headerlink\" title=\"容器热重载\"></a>容器热重载</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -i [container_name] /usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>"},{"title":"小程序6位密码输入框","originContent":"","toc":true,"date":"2019-01-29T08:50:22.000Z","_content":"\n# 原理\n\n用一层input覆盖在6格上，全透明，声明2个变量，一个绑定6格，一个绑定input，监听input\n\n<!-- more -->\n\n**存在bug: 无法监听是从第几位删除，所以只能全输入后给一个清空按钮，比较稳妥**\n\n# wxml\n\n```html\n<view class=\"pos-r\">\n            <view class=\" d-flex mx-1-reverse mt-1\">\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[0]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[1]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[2]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[3]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[4]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[5]}}</view>\n                </view>\n            </view>\n\n            <input type=\"password\" bindinput=\"watchInput\" value=\"{{password}}\" maxlength=\"6\" auto-focus=\"true\" focus=\"true\" disabled=\"{{inputDisabled}}\" data-model=\"password\"\n                   class=\"pwd-input pos-a full-height bg-grey200\"></input>\n        </view>\n```\n\n# js\n```js\nPage({\n\n    /**\n     * 页面的初始数据\n     */\n    data: {\n        password: null,\n        passwordText: null,\n    },\n    /**\n     * 监听文本框\n     */\n    watchInput: function (e) {\n        let that = this\n        let model = e.currentTarget.dataset.model\n        let value = !e.detail.value ? null : e.detail.value\n        let arr = value ? value.split('') : null\n        let passwordText = []\n        if (arr) {\n\n            for (let i = 0; i < arr.length; i++) {\n                passwordText.push('●')\n            }\n        }\n        that.setData({\n            passwordText,\n            password: value\n        })\n    },\n})\n```\n\n# wxss\n```css\n.page-inputPwd .pwd-input {\n    opacity: 0;\n    right: -50vw;\n    top: 0;\n    z-index: 1;\n    width: 200vw;\n}\n```","source":"_posts/wechat-app.md","raw":"---\ntitle: 小程序6位密码输入框\ntags:\n  - 小程序\noriginContent: ''\ncategories:\n  - 小程序\ntoc: true\ndate: 2019-01-29 16:50:22\n---\n\n# 原理\n\n用一层input覆盖在6格上，全透明，声明2个变量，一个绑定6格，一个绑定input，监听input\n\n<!-- more -->\n\n**存在bug: 无法监听是从第几位删除，所以只能全输入后给一个清空按钮，比较稳妥**\n\n# wxml\n\n```html\n<view class=\"pos-r\">\n            <view class=\" d-flex mx-1-reverse mt-1\">\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[0]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[1]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[2]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[3]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[4]}}</view>\n                </view>\n                <view class=\"px-1 flex-1\">\n                    <view class=\"bg-grey200 d-flex justify-content-center align-items-center\" style=\"height:80rpx;\">{{passwordText[5]}}</view>\n                </view>\n            </view>\n\n            <input type=\"password\" bindinput=\"watchInput\" value=\"{{password}}\" maxlength=\"6\" auto-focus=\"true\" focus=\"true\" disabled=\"{{inputDisabled}}\" data-model=\"password\"\n                   class=\"pwd-input pos-a full-height bg-grey200\"></input>\n        </view>\n```\n\n# js\n```js\nPage({\n\n    /**\n     * 页面的初始数据\n     */\n    data: {\n        password: null,\n        passwordText: null,\n    },\n    /**\n     * 监听文本框\n     */\n    watchInput: function (e) {\n        let that = this\n        let model = e.currentTarget.dataset.model\n        let value = !e.detail.value ? null : e.detail.value\n        let arr = value ? value.split('') : null\n        let passwordText = []\n        if (arr) {\n\n            for (let i = 0; i < arr.length; i++) {\n                passwordText.push('●')\n            }\n        }\n        that.setData({\n            passwordText,\n            password: value\n        })\n    },\n})\n```\n\n# wxss\n```css\n.page-inputPwd .pwd-input {\n    opacity: 0;\n    right: -50vw;\n    top: 0;\n    z-index: 1;\n    width: 200vw;\n}\n```","slug":"wechat-app","published":1,"updated":"2019-07-02T06:42:42.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydi0008s99g0wumg0kl","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>用一层input覆盖在6格上，全透明，声明2个变量，一个绑定6格，一个绑定input，监听input</p><a id=\"more\"></a><p><strong>存在bug: 无法监听是从第几位删除，所以只能全输入后给一个清空按钮，比较稳妥</strong></p><h1 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h1><figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pos-r\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\" d-flex mx-1-reverse mt-1\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[0]&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[1]&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[2]&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[3]&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[4]&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[5]&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">bindinput</span>=<span class=\"hljs-string\">\"watchInput\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"&#123;&#123;password&#125;&#125;\"</span> <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">\"6\"</span> <span class=\"hljs-attr\">auto-focus</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">focus</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">\"&#123;&#123;inputDisabled&#125;&#125;\"</span> <span class=\"hljs-attr\">data-model</span>=<span class=\"hljs-string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">                   <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pwd-input pos-a full-height bg-grey200\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">input</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\">     * 页面的初始数据</span></span><br><span class=\"line\"><span class=\"hljs-comment\">     */</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        password: <span class=\"hljs-literal\">null</span>,</span><br><span class=\"line\">        passwordText: <span class=\"hljs-literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\">     * 监听文本框</span></span><br><span class=\"line\"><span class=\"hljs-comment\">     */</span></span><br><span class=\"line\">    watchInput: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> that = <span class=\"hljs-keyword\">this</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> model = e.currentTarget.dataset.model</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> value = !e.detail.value ? <span class=\"hljs-literal\">null</span> : e.detail.value</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> arr = value ? value.split(<span class=\"hljs-string\">''</span>) : <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> passwordText = []</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                passwordText.push(<span class=\"hljs-string\">'●'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">            passwordText,</span><br><span class=\"line\">            password: value</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h1 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h1><figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.page-inputPwd</span> <span class=\"hljs-selector-class\">.pwd-input</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">right</span>: -<span class=\"hljs-number\">50vw</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>用一层input覆盖在6格上，全透明，声明2个变量，一个绑定6格，一个绑定input，监听input</p>","more":"<p><strong>存在bug: 无法监听是从第几位删除，所以只能全输入后给一个清空按钮，比较稳妥</strong></p><h1 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pos-r\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\" d-flex mx-1-reverse mt-1\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[0]&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[1]&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[2]&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[3]&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[4]&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"px-1 flex-1\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-grey200 d-flex justify-content-center align-items-center\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80rpx;\"</span>&gt;</span>&#123;&#123;passwordText[5]&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">bindinput</span>=<span class=\"string\">\"watchInput\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123;password&#125;&#125;\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">auto-focus</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">focus</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"&#123;&#123;inputDisabled&#125;&#125;\"</span> <span class=\"attr\">data-model</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">class</span>=<span class=\"string\">\"pwd-input pos-a full-height bg-grey200\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 页面的初始数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        password: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        passwordText: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 监听文本框</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    watchInput: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> model = e.currentTarget.dataset.model</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = !e.detail.value ? <span class=\"literal\">null</span> : e.detail.value</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = value ? value.split(<span class=\"string\">''</span>) : <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> passwordText = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                passwordText.push(<span class=\"string\">'●'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">            passwordText,</span><br><span class=\"line\">            password: value</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h1 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page-inputPwd</span> <span class=\"selector-class\">.pwd-input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">50vw</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"微信小程序input监听获取值","originContent":"# 原理\n给dom设置属性，\n`data-model`：这是\n# js\n```js\n/**\n   * 页面的初始数据，其中form其实可以不写\n   */\nPage({\n    data: {\n        name: null,\n        age: null,\n    },\n    /**\n     * 监听文本框\n     */\n    watchInput: function (e) {\n        let that = this\n        console.log(e)\n        let model = e.currentTarget.dataset.model\n        let value = e.detail.value\n        that.setData({\n            [model]: value\n        })\n    }\n})\n```\n\n# wxml\n\n```html\n<!-- \ndata-model:类型，对应data中的key\n-->\n<input placeholder=\"姓名\" data-model=\"name\" bindinput=\"watchInput\">\n\n<input type=\"number\" placeholder=\"年龄\" data-model=\"age\" bindinput=\"watchInput\">\n```","toc":true,"date":"2019-01-29T08:52:48.000Z","_content":"\n> 给input绑定一个方法，根据input上的字段设置，自动写入`this.data`\n\n<!-- more -->\n# 原理\n给dom设置属性，\n`data-model`：这是\n# js\n```js\n/**\n   * 页面的初始数据，其中form其实可以不写\n   */\nPage({\n    data: {\n        name: null,\n        age: null,\n    },\n    /**\n     * 监听文本框\n     */\n    watchInput: function (e) {\n        let that = this\n        console.log(e)\n        let model = e.currentTarget.dataset.model\n        let value = e.detail.value\n        that.setData({\n            [model]: value\n        })\n    }\n})\n```\n\n# wxml\n\n```html\n<!-- \ndata-model:类型，对应data中的key\n-->\n<input placeholder=\"姓名\" data-model=\"name\" bindinput=\"watchInput\">\n\n<input type=\"number\" placeholder=\"年龄\" data-model=\"age\" bindinput=\"watchInput\">\n```","source":"_posts/微信小程序input监听获取值.md","raw":"---\ntitle: 微信小程序input监听获取值\ntags:\n  - 小程序\noriginContent: |-\n  # 原理\n  给dom设置属性，\n  `data-model`：这是\n  # js\n  ```js\n  /**\n     * 页面的初始数据，其中form其实可以不写\n     */\n  Page({\n      data: {\n          name: null,\n          age: null,\n      },\n      /**\n       * 监听文本框\n       */\n      watchInput: function (e) {\n          let that = this\n          console.log(e)\n          let model = e.currentTarget.dataset.model\n          let value = e.detail.value\n          that.setData({\n              [model]: value\n          })\n      }\n  })\n  ```\n\n  # wxml\n\n  ```html\n  <!-- \n  data-model:类型，对应data中的key\n  -->\n  <input placeholder=\"姓名\" data-model=\"name\" bindinput=\"watchInput\">\n\n  <input type=\"number\" placeholder=\"年龄\" data-model=\"age\" bindinput=\"watchInput\">\n  ```\ncategories:\n  - 小程序\ntoc: true\ndate: 2019-01-29 16:52:48\n---\n\n> 给input绑定一个方法，根据input上的字段设置，自动写入`this.data`\n\n<!-- more -->\n# 原理\n给dom设置属性，\n`data-model`：这是\n# js\n```js\n/**\n   * 页面的初始数据，其中form其实可以不写\n   */\nPage({\n    data: {\n        name: null,\n        age: null,\n    },\n    /**\n     * 监听文本框\n     */\n    watchInput: function (e) {\n        let that = this\n        console.log(e)\n        let model = e.currentTarget.dataset.model\n        let value = e.detail.value\n        that.setData({\n            [model]: value\n        })\n    }\n})\n```\n\n# wxml\n\n```html\n<!-- \ndata-model:类型，对应data中的key\n-->\n<input placeholder=\"姓名\" data-model=\"name\" bindinput=\"watchInput\">\n\n<input type=\"number\" placeholder=\"年龄\" data-model=\"age\" bindinput=\"watchInput\">\n```","slug":"微信小程序input监听获取值","published":1,"updated":"2019-07-02T06:41:49.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydj000bs99gpyt5rose","content":"<blockquote><p>给input绑定一个方法，根据input上的字段设置，自动写入<code>this.data</code></p></blockquote><a id=\"more\"></a><h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>给dom设置属性，<br><code>data-model</code>：这是</p><h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * 页面的初始数据，其中form其实可以不写</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        name: <span class=\"hljs-literal\">null</span>,</span><br><span class=\"line\">        age: <span class=\"hljs-literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\">     * 监听文本框</span></span><br><span class=\"line\"><span class=\"hljs-comment\">     */</span></span><br><span class=\"line\">    watchInput: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> that = <span class=\"hljs-keyword\">this</span></span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(e)</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> model = e.currentTarget.dataset.model</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> value = e.detail.value</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">            [model]: value</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h1 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h1><figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"hljs-comment\">data-model:类型，对应data中的key</span></span><br><span class=\"line\"><span class=\"hljs-comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"姓名\"</span> <span class=\"hljs-attr\">data-model</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">bindinput</span>=<span class=\"hljs-string\">\"watchInput\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"年龄\"</span> <span class=\"hljs-attr\">data-model</span>=<span class=\"hljs-string\">\"age\"</span> <span class=\"hljs-attr\">bindinput</span>=<span class=\"hljs-string\">\"watchInput\"</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote><p>给input绑定一个方法，根据input上的字段设置，自动写入<code>this.data</code></p></blockquote>","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>给dom设置属性，<br><code>data-model</code>：这是</p><h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 页面的初始数据，其中form其实可以不写</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        name: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        age: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 监听文本框</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    watchInput: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> model = e.currentTarget.dataset.model</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = e.detail.value</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">            [model]: value</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h1 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">data-model:类型，对应data中的key</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"姓名\"</span> <span class=\"attr\">data-model</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">bindinput</span>=<span class=\"string\">\"watchInput\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"年龄\"</span> <span class=\"attr\">data-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">bindinput</span>=<span class=\"string\">\"watchInput\"</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"使用frp内网穿透","originContent":"> frp地址：https://github.com/fatedier/frp\n\n# 本文目的\n\n1. 将一台个人电脑配置成一台可外网访问的服务器\n2. 用自己的个人电脑做各种和服务器一样事\n\n# 你需要准备\n1. 一台能外网访问的服务器\n2. 一台能长期开机当服务器跑的个人电脑\n\n# 术语及机器配置\n内网机：deepin最新版\n\n服务器：阿里云ecs最低配\n\n服务器IP：x.x.x.x\n\nport=7000：服务器端绑定此端口，提供给内网机使用\n\nport=8080：所有web访问\n\nport=6000：ssh访问需要指定的端口\n\nport=7500：访问web仪表盘需要带的端口\n\nport=5000：访问mongodb端口\n# 内网机需要做的事\n1. 安装ssh\n2. 开启22端口\n3. 配置frp\n4. 后台运行frp\n\n## 安装ssh服务\n> 关于deepin的shh服务，可以看官方教程：[https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1](https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1)\n\n总之，运行1个命令即可安装\n\n```\nsudo apt-get install openssh-server\n```\n\n查看是否运行\n```\nps -e |grep ssh\n```\n\n如果返回有sshd，就是成功开启\n\n## 开放22端口\n```\nvim /etc/ssh/ssh_config\n```\n找到`Port 22`\n删除前面的`#`，保存\n\n```\n/etc/init.d/ssh restart \n```\n\n# 配置frp服务（主角）\n## 下载frp\n1. 在release下载最新版[https://github.com/fatedier/frp/releases](https://github.com/fatedier/frp/releases)\n2. 解压\n\n## 文件说明\n\n```\nfrps.ini: 服务端配置文件\nfrps: 服务端软件\nfrpc.ini: 客户端配置文件\nfrpc: 客户端软件\n```\n## 配置说明\n```\n[common]        //必须设置\nbind_port       //是自己设定的frp服务端端口\nvhost_http_port //是自己设定的http访问端口\n[ssh]           //ssh反向代理(不是必须设置)\nlisten_port     //是自己设定的ssh访问端口\nauth_token      //用于身份认证（以下皆是）。\n[web]           //http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；\ntype            //为服务类型，可以设为http,https\ncustom_domains  //为要映射的域名，记得域名的A记录要解析到外网主机的IP。\n[web2]          //同上(可设置多个)\n```\n以上配置信息和文件说明主要参考：https://www.jianshu.com/p/93bf511ea72e，感谢\n### 服务器端配置\n1. 上传`frps`、`frps.ini`到服务器，修改`frps.ini`\n```\n# frps.ini\n[common]\nbind_port = 7000        //提供给内网机的端口，端口不能被占用\nvhost_http_port = 8080  //内网机http访问的端口，端口不能被占用\n```\n2. 运行frps\n```\n./frps -c ./frps.ini\n```\n\n**注意：所使用的端口，都要在阿里云控制面板中添加安全配置的规则**\n### 外网机配置\n#### 1、添加ssh\n1. 修改`frpc.ini`\n```\n# frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n**common模块：**\n\n`server_addr` 绑定服务器的ip地址\n\n`server_port` 外网机绑定服务器设置的端口\n\n**ssh模块：**\n\n规定了ssh的配置\n\n`remote_port`为ssh时指定的端口\n\n**运行**\n```\n./frpc -c ./frpc.ini\n```\n此时，在其他linux端直接使用命令连接ssh，假设名为`test`\n```\nssh -oPort=6000 test@x.x.x.x\n```\n或者用xshell等软件连接也可以\n#### 2、添加web服务\n```\n# frpc.ini\n...\n[web1]\ntype = http\nlocal_port = 80\ncustom_domains = www.aa.com\n```\n`web1` 每个站点服务就写一个web服务，一个站点多个域名可以使用\n\n`custom_domains` 绑定站点的域名，例如，本机nginx上站点域名为www.aa.com，那此处就必须是www.aa.com\n\n**运行**\n```\n./frpc -c ./frpc.ini\n```\n此时，将www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点\n\n# 后台运行\n使用`nohup`运行上面的命令\n```\nnohup ./frpc -c ./frpc.ini &\n```\n**注意**\n\n`&`是必须的\n\n```\nps -ef |grep frp\n```\n如果启动成功了，就会看到有frpc的进程了\n\n这时候，电脑别动，去别的机子访问ssh或者内网机设置的域名，看看内网机是否成为一台可以外网访问的服务器吧。","toc":true,"date":"2018-11-13T07:36:15.000Z","_content":"\n> frp地址：https://github.com/fatedier/frp\n\n# 本文目的\n\n1. 将一台个人电脑配置成一台可外网访问的服务器\n2. 用自己的个人电脑做各种和服务器一样事\n\n# 你需要准备\n1. 一台能外网访问的服务器\n2. 一台能长期开机当服务器跑的个人电脑\n\n<!-- more -->\n\n# 术语及机器配置\n内网机：deepin最新版\n\n服务器：阿里云ecs最低配\n\n服务器IP：x.x.x.x\n\nport=7000：服务器端绑定此端口，提供给内网机使用\n\nport=8080：所有web访问\n\nport=6000：ssh访问需要指定的端口\n\nport=7500：访问web仪表盘需要带的端口\n\nport=5000：访问mongodb端口\n# 内网机需要做的事\n1. 安装ssh\n2. 开启22端口\n3. 配置frp\n4. 后台运行frp\n\n## 安装ssh服务\n> 关于deepin的shh服务，可以看官方教程：[https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1](https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1)\n\n总之，运行1个命令即可安装\n\n```\nsudo apt-get install openssh-server\n```\n\n查看是否运行\n```\nps -e |grep ssh\n```\n\n如果返回有sshd，就是成功开启\n\n## 开放22端口\n```\nvim /etc/ssh/ssh_config\n```\n找到`Port 22`\n删除前面的`#`，保存\n\n```\n/etc/init.d/ssh restart \n```\n\n# 配置frp服务（主角）\n## 下载frp\n1. 在release下载最新版[https://github.com/fatedier/frp/releases](https://github.com/fatedier/frp/releases)\n2. 解压\n\n## 文件说明\n\n```\nfrps.ini: 服务端配置文件\nfrps: 服务端软件\nfrpc.ini: 客户端配置文件\nfrpc: 客户端软件\n```\n## 配置说明\n```\n[common]        //必须设置\nbind_port       //是自己设定的frp服务端端口\nvhost_http_port //是自己设定的http访问端口\n[ssh]           //ssh反向代理(不是必须设置)\nlisten_port     //是自己设定的ssh访问端口\nauth_token      //用于身份认证（以下皆是）。\n[web]           //http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；\ntype            //为服务类型，可以设为http,https\ncustom_domains  //为要映射的域名，记得域名的A记录要解析到外网主机的IP。\n[web2]          //同上(可设置多个)\n```\n以上配置信息和文件说明主要参考：https://www.jianshu.com/p/93bf511ea72e，感谢\n### 服务器端配置\n1. 上传`frps`、`frps.ini`到服务器，修改`frps.ini`\n```\n# frps.ini\n[common]\nbind_port = 7000        //提供给内网机的端口，端口不能被占用\nvhost_http_port = 8080  //内网机http访问的端口，端口不能被占用\n```\n2. 运行frps\n```\n./frps -c ./frps.ini\n```\n\n**注意：所使用的端口，都要在阿里云控制面板中添加安全配置的规则**\n### 外网机配置\n#### 1、添加ssh\n1. 修改`frpc.ini`\n```\n# frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n**common模块：**\n\n`server_addr` 绑定服务器的ip地址\n\n`server_port` 外网机绑定服务器设置的端口\n\n**ssh模块：**\n\n规定了ssh的配置\n\n`remote_port`为ssh时指定的端口\n\n**运行**\n```\n./frpc -c ./frpc.ini\n```\n此时，在其他linux端直接使用命令连接ssh，假设名为`test`\n```\nssh -oPort=6000 test@x.x.x.x\n```\n或者用xshell等软件连接也可以\n#### 2、添加web服务\n```\n# frpc.ini\n...\n[web1]\ntype = http\nlocal_port = 80\ncustom_domains = www.aa.com\n```\n`web1` 每个站点服务就写一个web服务，一个站点多个域名可以使用\n\n`custom_domains` 绑定站点的域名，例如，本机nginx上站点域名为www.aa.com，那此处就必须是www.aa.com\n\n**运行**\n```\n./frpc -c ./frpc.ini\n```\n此时，将www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点\n\n# 后台运行\n使用`nohup`运行上面的命令\n```\nnohup ./frpc -c ./frpc.ini &\n```\n**注意**\n\n`&`是必须的\n\n```\nps -ef |grep frp\n```\n如果启动成功了，就会看到有frpc的进程了\n\n这时候，电脑别动，去别的机子访问ssh或者内网机设置的域名，看看内网机是否成为一台可以外网访问的服务器吧。","source":"_posts/使用frp内网穿透.md","raw":"---\ntitle: 使用frp内网穿透\ntags:\n  - frp\n  - 内网穿透\noriginContent: >-\n  > frp地址：https://github.com/fatedier/frp\n\n\n  # 本文目的\n\n\n  1. 将一台个人电脑配置成一台可外网访问的服务器\n\n  2. 用自己的个人电脑做各种和服务器一样事\n\n\n  # 你需要准备\n\n  1. 一台能外网访问的服务器\n\n  2. 一台能长期开机当服务器跑的个人电脑\n\n\n  # 术语及机器配置\n\n  内网机：deepin最新版\n\n\n  服务器：阿里云ecs最低配\n\n\n  服务器IP：x.x.x.x\n\n\n  port=7000：服务器端绑定此端口，提供给内网机使用\n\n\n  port=8080：所有web访问\n\n\n  port=6000：ssh访问需要指定的端口\n\n\n  port=7500：访问web仪表盘需要带的端口\n\n\n  port=5000：访问mongodb端口\n\n  # 内网机需要做的事\n\n  1. 安装ssh\n\n  2. 开启22端口\n\n  3. 配置frp\n\n  4. 后台运行frp\n\n\n  ## 安装ssh服务\n\n  >\n  关于deepin的shh服务，可以看官方教程：[https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1](https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1)\n\n\n  总之，运行1个命令即可安装\n\n\n  ```\n\n  sudo apt-get install openssh-server\n\n  ```\n\n\n  查看是否运行\n\n  ```\n\n  ps -e |grep ssh\n\n  ```\n\n\n  如果返回有sshd，就是成功开启\n\n\n  ## 开放22端口\n\n  ```\n\n  vim /etc/ssh/ssh_config\n\n  ```\n\n  找到`Port 22`\n\n  删除前面的`#`，保存\n\n\n  ```\n\n  /etc/init.d/ssh restart \n\n  ```\n\n\n  # 配置frp服务（主角）\n\n  ## 下载frp\n\n  1.\n  在release下载最新版[https://github.com/fatedier/frp/releases](https://github.com/fatedier/frp/releases)\n\n  2. 解压\n\n\n  ## 文件说明\n\n\n  ```\n\n  frps.ini: 服务端配置文件\n\n  frps: 服务端软件\n\n  frpc.ini: 客户端配置文件\n\n  frpc: 客户端软件\n\n  ```\n\n  ## 配置说明\n\n  ```\n\n  [common]        //必须设置\n\n  bind_port       //是自己设定的frp服务端端口\n\n  vhost_http_port //是自己设定的http访问端口\n\n  [ssh]           //ssh反向代理(不是必须设置)\n\n  listen_port     //是自己设定的ssh访问端口\n\n  auth_token      //用于身份认证（以下皆是）。\n\n  [web]           //http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；\n\n  type            //为服务类型，可以设为http,https\n\n  custom_domains  //为要映射的域名，记得域名的A记录要解析到外网主机的IP。\n\n  [web2]          //同上(可设置多个)\n\n  ```\n\n  以上配置信息和文件说明主要参考：https://www.jianshu.com/p/93bf511ea72e，感谢\n\n  ### 服务器端配置\n\n  1. 上传`frps`、`frps.ini`到服务器，修改`frps.ini`\n\n  ```\n\n  # frps.ini\n\n  [common]\n\n  bind_port = 7000        //提供给内网机的端口，端口不能被占用\n\n  vhost_http_port = 8080  //内网机http访问的端口，端口不能被占用\n\n  ```\n\n  2. 运行frps\n\n  ```\n\n  ./frps -c ./frps.ini\n\n  ```\n\n\n  **注意：所使用的端口，都要在阿里云控制面板中添加安全配置的规则**\n\n  ### 外网机配置\n\n  #### 1、添加ssh\n\n  1. 修改`frpc.ini`\n\n  ```\n\n  # frpc.ini\n\n  [common]\n\n  server_addr = x.x.x.x\n\n  server_port = 7000\n\n\n  [ssh]\n\n  type = tcp\n\n  local_ip = 127.0.0.1\n\n  local_port = 22\n\n  remote_port = 6000\n\n  ```\n\n  **common模块：**\n\n\n  `server_addr` 绑定服务器的ip地址\n\n\n  `server_port` 外网机绑定服务器设置的端口\n\n\n  **ssh模块：**\n\n\n  规定了ssh的配置\n\n\n  `remote_port`为ssh时指定的端口\n\n\n  **运行**\n\n  ```\n\n  ./frpc -c ./frpc.ini\n\n  ```\n\n  此时，在其他linux端直接使用命令连接ssh，假设名为`test`\n\n  ```\n\n  ssh -oPort=6000 test@x.x.x.x\n\n  ```\n\n  或者用xshell等软件连接也可以\n\n  #### 2、添加web服务\n\n  ```\n\n  # frpc.ini\n\n  ...\n\n  [web1]\n\n  type = http\n\n  local_port = 80\n\n  custom_domains = www.aa.com\n\n  ```\n\n  `web1` 每个站点服务就写一个web服务，一个站点多个域名可以使用\n\n\n  `custom_domains` 绑定站点的域名，例如，本机nginx上站点域名为www.aa.com，那此处就必须是www.aa.com\n\n\n  **运行**\n\n  ```\n\n  ./frpc -c ./frpc.ini\n\n  ```\n\n  此时，将www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点\n\n\n  # 后台运行\n\n  使用`nohup`运行上面的命令\n\n  ```\n\n  nohup ./frpc -c ./frpc.ini &\n\n  ```\n\n  **注意**\n\n\n  `&`是必须的\n\n\n  ```\n\n  ps -ef |grep frp\n\n  ```\n\n  如果启动成功了，就会看到有frpc的进程了\n\n\n  这时候，电脑别动，去别的机子访问ssh或者内网机设置的域名，看看内网机是否成为一台可以外网访问的服务器吧。\ncategories:\n  - 网络应用\ntoc: true\ndate: 2018-11-13 15:36:15\n---\n\n> frp地址：https://github.com/fatedier/frp\n\n# 本文目的\n\n1. 将一台个人电脑配置成一台可外网访问的服务器\n2. 用自己的个人电脑做各种和服务器一样事\n\n# 你需要准备\n1. 一台能外网访问的服务器\n2. 一台能长期开机当服务器跑的个人电脑\n\n<!-- more -->\n\n# 术语及机器配置\n内网机：deepin最新版\n\n服务器：阿里云ecs最低配\n\n服务器IP：x.x.x.x\n\nport=7000：服务器端绑定此端口，提供给内网机使用\n\nport=8080：所有web访问\n\nport=6000：ssh访问需要指定的端口\n\nport=7500：访问web仪表盘需要带的端口\n\nport=5000：访问mongodb端口\n# 内网机需要做的事\n1. 安装ssh\n2. 开启22端口\n3. 配置frp\n4. 后台运行frp\n\n## 安装ssh服务\n> 关于deepin的shh服务，可以看官方教程：[https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1](https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1)\n\n总之，运行1个命令即可安装\n\n```\nsudo apt-get install openssh-server\n```\n\n查看是否运行\n```\nps -e |grep ssh\n```\n\n如果返回有sshd，就是成功开启\n\n## 开放22端口\n```\nvim /etc/ssh/ssh_config\n```\n找到`Port 22`\n删除前面的`#`，保存\n\n```\n/etc/init.d/ssh restart \n```\n\n# 配置frp服务（主角）\n## 下载frp\n1. 在release下载最新版[https://github.com/fatedier/frp/releases](https://github.com/fatedier/frp/releases)\n2. 解压\n\n## 文件说明\n\n```\nfrps.ini: 服务端配置文件\nfrps: 服务端软件\nfrpc.ini: 客户端配置文件\nfrpc: 客户端软件\n```\n## 配置说明\n```\n[common]        //必须设置\nbind_port       //是自己设定的frp服务端端口\nvhost_http_port //是自己设定的http访问端口\n[ssh]           //ssh反向代理(不是必须设置)\nlisten_port     //是自己设定的ssh访问端口\nauth_token      //用于身份认证（以下皆是）。\n[web]           //http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；\ntype            //为服务类型，可以设为http,https\ncustom_domains  //为要映射的域名，记得域名的A记录要解析到外网主机的IP。\n[web2]          //同上(可设置多个)\n```\n以上配置信息和文件说明主要参考：https://www.jianshu.com/p/93bf511ea72e，感谢\n### 服务器端配置\n1. 上传`frps`、`frps.ini`到服务器，修改`frps.ini`\n```\n# frps.ini\n[common]\nbind_port = 7000        //提供给内网机的端口，端口不能被占用\nvhost_http_port = 8080  //内网机http访问的端口，端口不能被占用\n```\n2. 运行frps\n```\n./frps -c ./frps.ini\n```\n\n**注意：所使用的端口，都要在阿里云控制面板中添加安全配置的规则**\n### 外网机配置\n#### 1、添加ssh\n1. 修改`frpc.ini`\n```\n# frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n**common模块：**\n\n`server_addr` 绑定服务器的ip地址\n\n`server_port` 外网机绑定服务器设置的端口\n\n**ssh模块：**\n\n规定了ssh的配置\n\n`remote_port`为ssh时指定的端口\n\n**运行**\n```\n./frpc -c ./frpc.ini\n```\n此时，在其他linux端直接使用命令连接ssh，假设名为`test`\n```\nssh -oPort=6000 test@x.x.x.x\n```\n或者用xshell等软件连接也可以\n#### 2、添加web服务\n```\n# frpc.ini\n...\n[web1]\ntype = http\nlocal_port = 80\ncustom_domains = www.aa.com\n```\n`web1` 每个站点服务就写一个web服务，一个站点多个域名可以使用\n\n`custom_domains` 绑定站点的域名，例如，本机nginx上站点域名为www.aa.com，那此处就必须是www.aa.com\n\n**运行**\n```\n./frpc -c ./frpc.ini\n```\n此时，将www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点\n\n# 后台运行\n使用`nohup`运行上面的命令\n```\nnohup ./frpc -c ./frpc.ini &\n```\n**注意**\n\n`&`是必须的\n\n```\nps -ef |grep frp\n```\n如果启动成功了，就会看到有frpc的进程了\n\n这时候，电脑别动，去别的机子访问ssh或者内网机设置的域名，看看内网机是否成为一台可以外网访问的服务器吧。","slug":"使用frp内网穿透","published":1,"updated":"2019-07-02T06:46:07.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydk000cs99g4wlengu1","content":"<blockquote><p>frp地址：<a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp</a></p></blockquote><h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><ol><li>将一台个人电脑配置成一台可外网访问的服务器</li><li>用自己的个人电脑做各种和服务器一样事</li></ol><h1 id=\"你需要准备\"><a href=\"#你需要准备\" class=\"headerlink\" title=\"你需要准备\"></a>你需要准备</h1><ol><li>一台能外网访问的服务器</li><li>一台能长期开机当服务器跑的个人电脑</li></ol><a id=\"more\"></a><h1 id=\"术语及机器配置\"><a href=\"#术语及机器配置\" class=\"headerlink\" title=\"术语及机器配置\"></a>术语及机器配置</h1><p>内网机：deepin最新版</p><p>服务器：阿里云ecs最低配</p><p>服务器IP：x.x.x.x</p><p>port=7000：服务器端绑定此端口，提供给内网机使用</p><p>port=8080：所有web访问</p><p>port=6000：ssh访问需要指定的端口</p><p>port=7500：访问web仪表盘需要带的端口</p><p>port=5000：访问mongodb端口</p><h1 id=\"内网机需要做的事\"><a href=\"#内网机需要做的事\" class=\"headerlink\" title=\"内网机需要做的事\"></a>内网机需要做的事</h1><ol><li>安装ssh</li><li>开启22端口</li><li>配置frp</li><li>后台运行frp</li></ol><h2 id=\"安装ssh服务\"><a href=\"#安装ssh服务\" class=\"headerlink\" title=\"安装ssh服务\"></a>安装ssh服务</h2><blockquote><p>关于deepin的shh服务，可以看官方教程：<a href=\"https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1\" target=\"_blank\" rel=\"noopener\">https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1</a></p></blockquote><p>总之，运行1个命令即可安装</p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>查看是否运行<br></p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -e |grep ssh</span><br></pre></td></tr></table></figure><p></p><p>如果返回有sshd，就是成功开启</p><h2 id=\"开放22端口\"><a href=\"#开放22端口\" class=\"headerlink\" title=\"开放22端口\"></a>开放22端口</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>找到<code>Port 22</code><br>删除前面的<code>#</code>，保存</p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h1 id=\"配置frp服务（主角）\"><a href=\"#配置frp服务（主角）\" class=\"headerlink\" title=\"配置frp服务（主角）\"></a>配置frp服务（主角）</h1><h2 id=\"下载frp\"><a href=\"#下载frp\" class=\"headerlink\" title=\"下载frp\"></a>下载frp</h2><ol><li>在release下载最新版<a href=\"https://github.com/fatedier/frp/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp/releases</a></li><li>解压</li></ol><h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frps.ini: 服务端配置文件</span><br><span class=\"line\">frps: 服务端软件</span><br><span class=\"line\">frpc.ini: 客户端配置文件</span><br><span class=\"line\">frpc: 客户端软件</span><br></pre></td></tr></table></figure><h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]        //必须设置</span><br><span class=\"line\">bind_port       //是自己设定的frp服务端端口</span><br><span class=\"line\">vhost_http_port //是自己设定的http访问端口</span><br><span class=\"line\">[ssh]           //ssh反向代理(不是必须设置)</span><br><span class=\"line\">listen_port     //是自己设定的ssh访问端口</span><br><span class=\"line\">auth_token      //用于身份认证（以下皆是）。</span><br><span class=\"line\">[web]           //http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；</span><br><span class=\"line\">type            //为服务类型，可以设为http,https</span><br><span class=\"line\">custom_domains  //为要映射的域名，记得域名的A记录要解析到外网主机的IP。</span><br><span class=\"line\">[web2]          //同上(可设置多个)</span><br></pre></td></tr></table></figure><p>以上配置信息和文件说明主要参考：<a href=\"https://www.jianshu.com/p/93bf511ea72e，感谢\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/93bf511ea72e，感谢</a></p><h3 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h3><ol><li><p>上传<code>frps</code>、<code>frps.ini</code>到服务器，修改<code>frps.ini</code></p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># frps.ini</span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000        //提供给内网机的端口，端口不能被占用</span><br><span class=\"line\">vhost_http_port = 8080  //内网机http访问的端口，端口不能被占用</span><br></pre></td></tr></table></figure></li><li><p>运行frps</p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：所使用的端口，都要在阿里云控制面板中添加安全配置的规则</strong></p><h3 id=\"外网机配置\"><a href=\"#外网机配置\" class=\"headerlink\" title=\"外网机配置\"></a>外网机配置</h3><h4 id=\"1、添加ssh\"><a href=\"#1、添加ssh\" class=\"headerlink\" title=\"1、添加ssh\"></a>1、添加ssh</h4><ol><li>修改<code>frpc.ini</code><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># frpc.ini</span><br><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = x.x.x.x</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 6000</span><br></pre></td></tr></table></figure></li></ol><p><strong>common模块：</strong></p><p><code>server_addr</code> 绑定服务器的ip地址</p><p><code>server_port</code> 外网机绑定服务器设置的端口</p><p><strong>ssh模块：</strong></p><p>规定了ssh的配置</p><p><code>remote_port</code>为ssh时指定的端口</p><p><strong>运行</strong><br></p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p></p><p>此时，在其他linux端直接使用命令连接ssh，假设名为<code>test</code><br></p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -oPort=6000 test@x.x.x.x</span><br></pre></td></tr></table></figure><p></p><p>或者用xshell等软件连接也可以</p><h4 id=\"2、添加web服务\"><a href=\"#2、添加web服务\" class=\"headerlink\" title=\"2、添加web服务\"></a>2、添加web服务</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># frpc.ini</span><br><span class=\"line\">...</span><br><span class=\"line\">[web1]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">local_port = 80</span><br><span class=\"line\">custom_domains = www.aa.com</span><br></pre></td></tr></table></figure><p><code>web1</code> 每个站点服务就写一个web服务，一个站点多个域名可以使用</p><p><code>custom_domains</code> 绑定站点的域名，例如，本机nginx上站点域名为<a href=\"http://www.aa.com，那此处就必须是www.aa.com\" target=\"_blank\" rel=\"noopener\">www.aa.com，那此处就必须是www.aa.com</a></p><p><strong>运行</strong><br></p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p></p><p>此时，将<a href=\"http://www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点\" target=\"_blank\" rel=\"noopener\">www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点</a></p><h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><p>使用<code>nohup</code>运行上面的命令<br></p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure><p></p><p><strong>注意</strong></p><p><code>&amp;</code>是必须的</p><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef |grep frp</span><br></pre></td></tr></table></figure><p>如果启动成功了，就会看到有frpc的进程了</p><p>这时候，电脑别动，去别的机子访问ssh或者内网机设置的域名，看看内网机是否成为一台可以外网访问的服务器吧。</p>","site":{"data":{}},"excerpt":"<blockquote><p>frp地址：<a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp</a></p></blockquote><h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><ol><li>将一台个人电脑配置成一台可外网访问的服务器</li><li>用自己的个人电脑做各种和服务器一样事</li></ol><h1 id=\"你需要准备\"><a href=\"#你需要准备\" class=\"headerlink\" title=\"你需要准备\"></a>你需要准备</h1><ol><li>一台能外网访问的服务器</li><li>一台能长期开机当服务器跑的个人电脑</li></ol>","more":"<h1 id=\"术语及机器配置\"><a href=\"#术语及机器配置\" class=\"headerlink\" title=\"术语及机器配置\"></a>术语及机器配置</h1><p>内网机：deepin最新版</p><p>服务器：阿里云ecs最低配</p><p>服务器IP：x.x.x.x</p><p>port=7000：服务器端绑定此端口，提供给内网机使用</p><p>port=8080：所有web访问</p><p>port=6000：ssh访问需要指定的端口</p><p>port=7500：访问web仪表盘需要带的端口</p><p>port=5000：访问mongodb端口</p><h1 id=\"内网机需要做的事\"><a href=\"#内网机需要做的事\" class=\"headerlink\" title=\"内网机需要做的事\"></a>内网机需要做的事</h1><ol><li>安装ssh</li><li>开启22端口</li><li>配置frp</li><li>后台运行frp</li></ol><h2 id=\"安装ssh服务\"><a href=\"#安装ssh服务\" class=\"headerlink\" title=\"安装ssh服务\"></a>安装ssh服务</h2><blockquote><p>关于deepin的shh服务，可以看官方教程：<a href=\"https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1\" target=\"_blank\" rel=\"noopener\">https://wiki.deepin.org/index.php?title=SSH%E6%9C%8D%E5%8A%A1</a></p></blockquote><p>总之，运行1个命令即可安装</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>查看是否运行<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -e |grep ssh</span><br></pre></td></tr></table></figure><p></p><p>如果返回有sshd，就是成功开启</p><h2 id=\"开放22端口\"><a href=\"#开放22端口\" class=\"headerlink\" title=\"开放22端口\"></a>开放22端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>找到<code>Port 22</code><br>删除前面的<code>#</code>，保存</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h1 id=\"配置frp服务（主角）\"><a href=\"#配置frp服务（主角）\" class=\"headerlink\" title=\"配置frp服务（主角）\"></a>配置frp服务（主角）</h1><h2 id=\"下载frp\"><a href=\"#下载frp\" class=\"headerlink\" title=\"下载frp\"></a>下载frp</h2><ol><li>在release下载最新版<a href=\"https://github.com/fatedier/frp/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp/releases</a></li><li>解压</li></ol><h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frps.ini: 服务端配置文件</span><br><span class=\"line\">frps: 服务端软件</span><br><span class=\"line\">frpc.ini: 客户端配置文件</span><br><span class=\"line\">frpc: 客户端软件</span><br></pre></td></tr></table></figure><h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]        //必须设置</span><br><span class=\"line\">bind_port       //是自己设定的frp服务端端口</span><br><span class=\"line\">vhost_http_port //是自己设定的http访问端口</span><br><span class=\"line\">[ssh]           //ssh反向代理(不是必须设置)</span><br><span class=\"line\">listen_port     //是自己设定的ssh访问端口</span><br><span class=\"line\">auth_token      //用于身份认证（以下皆是）。</span><br><span class=\"line\">[web]           //http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；</span><br><span class=\"line\">type            //为服务类型，可以设为http,https</span><br><span class=\"line\">custom_domains  //为要映射的域名，记得域名的A记录要解析到外网主机的IP。</span><br><span class=\"line\">[web2]          //同上(可设置多个)</span><br></pre></td></tr></table></figure><p>以上配置信息和文件说明主要参考：<a href=\"https://www.jianshu.com/p/93bf511ea72e，感谢\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/93bf511ea72e，感谢</a></p><h3 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h3><ol><li><p>上传<code>frps</code>、<code>frps.ini</code>到服务器，修改<code>frps.ini</code></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># frps.ini</span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000        //提供给内网机的端口，端口不能被占用</span><br><span class=\"line\">vhost_http_port = 8080  //内网机http访问的端口，端口不能被占用</span><br></pre></td></tr></table></figure></li><li><p>运行frps</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：所使用的端口，都要在阿里云控制面板中添加安全配置的规则</strong></p><h3 id=\"外网机配置\"><a href=\"#外网机配置\" class=\"headerlink\" title=\"外网机配置\"></a>外网机配置</h3><h4 id=\"1、添加ssh\"><a href=\"#1、添加ssh\" class=\"headerlink\" title=\"1、添加ssh\"></a>1、添加ssh</h4><ol><li>修改<code>frpc.ini</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># frpc.ini</span><br><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = x.x.x.x</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 6000</span><br></pre></td></tr></table></figure></li></ol><p><strong>common模块：</strong></p><p><code>server_addr</code> 绑定服务器的ip地址</p><p><code>server_port</code> 外网机绑定服务器设置的端口</p><p><strong>ssh模块：</strong></p><p>规定了ssh的配置</p><p><code>remote_port</code>为ssh时指定的端口</p><p><strong>运行</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p></p><p>此时，在其他linux端直接使用命令连接ssh，假设名为<code>test</code><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -oPort=6000 test@x.x.x.x</span><br></pre></td></tr></table></figure><p></p><p>或者用xshell等软件连接也可以</p><h4 id=\"2、添加web服务\"><a href=\"#2、添加web服务\" class=\"headerlink\" title=\"2、添加web服务\"></a>2、添加web服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># frpc.ini</span><br><span class=\"line\">...</span><br><span class=\"line\">[web1]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">local_port = 80</span><br><span class=\"line\">custom_domains = www.aa.com</span><br></pre></td></tr></table></figure><p><code>web1</code> 每个站点服务就写一个web服务，一个站点多个域名可以使用</p><p><code>custom_domains</code> 绑定站点的域名，例如，本机nginx上站点域名为<a href=\"http://www.aa.com，那此处就必须是www.aa.com\" target=\"_blank\" rel=\"noopener\">www.aa.com，那此处就必须是www.aa.com</a></p><p><strong>运行</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p></p><p>此时，将<a href=\"http://www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点\" target=\"_blank\" rel=\"noopener\">www.aa.com解析到服务器ip，浏览器访问`http://www.aa.com:8080`即可访问站点</a></p><h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><p>使用<code>nohup</code>运行上面的命令<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure><p></p><p><strong>注意</strong></p><p><code>&amp;</code>是必须的</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef |grep frp</span><br></pre></td></tr></table></figure><p>如果启动成功了，就会看到有frpc的进程了</p><p>这时候，电脑别动，去别的机子访问ssh或者内网机设置的域名，看看内网机是否成为一台可以外网访问的服务器吧。</p>"},{"title":"常用linux命令收集","originContent":"# ssh拷贝文件\n```\nscp -r username@ip:/path /localPath\nusername:可ssh的用户名\n/path：远程文件的地址\n/localPath：本地保存地址\n```","toc":true,"date":"2018-11-13T09:38:49.000Z","_content":"\n> 自己常用的linux命令记录\n\n<!-- more -->\n\n# ssh拷贝文件\n```\nscp -r username@ip:/path /localPath\nusername:可ssh的用户名\n/path：远程文件的地址\n/localPath：本地保存地址\n```","source":"_posts/常用linux命令收集.md","raw":"---\ntitle: 常用linux命令收集\ntags:\n  - linux\n  - 命令行\noriginContent: |-\n  # ssh拷贝文件\n  ```\n  scp -r username@ip:/path /localPath\n  username:可ssh的用户名\n  /path：远程文件的地址\n  /localPath：本地保存地址\n  ```\ncategories:\n  - 服务器\ntoc: true\ndate: 2018-11-13 17:38:49\n---\n\n> 自己常用的linux命令记录\n\n<!-- more -->\n\n# ssh拷贝文件\n```\nscp -r username@ip:/path /localPath\nusername:可ssh的用户名\n/path：远程文件的地址\n/localPath：本地保存地址\n```","slug":"常用linux命令收集","published":1,"updated":"2019-07-02T06:42:22.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1q8dydn000gs99gplxyk8g6","content":"<blockquote><p>自己常用的linux命令记录</p></blockquote><a id=\"more\"></a><h1 id=\"ssh拷贝文件\"><a href=\"#ssh拷贝文件\" class=\"headerlink\" title=\"ssh拷贝文件\"></a>ssh拷贝文件</h1><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r username@ip:/path /localPath</span><br><span class=\"line\">username:可ssh的用户名</span><br><span class=\"line\">/path：远程文件的地址</span><br><span class=\"line\">/localPath：本地保存地址</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote><p>自己常用的linux命令记录</p></blockquote>","more":"<h1 id=\"ssh拷贝文件\"><a href=\"#ssh拷贝文件\" class=\"headerlink\" title=\"ssh拷贝文件\"></a>ssh拷贝文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r username@ip:/path /localPath</span><br><span class=\"line\">username:可ssh的用户名</span><br><span class=\"line\">/path：远程文件的地址</span><br><span class=\"line\">/localPath：本地保存地址</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1q8dyd70000s99gip1cntw7","category_id":"ck1q8dyde0004s99gqrjcky0u","_id":"ck1q8dydl000ds99giysisybh"},{"post_id":"ck1q8dydc0002s99gi9cls74v","category_id":"ck1q8dydj0009s99gpbj9orh6","_id":"ck1q8dydp000ks99g8p7p862l"},{"post_id":"ck1q8dydg0006s99gndv03ljg","category_id":"ck1q8dydj0009s99gpbj9orh6","_id":"ck1q8dydq000ms99gjzt2cuz6"},{"post_id":"ck1q8dydh0007s99glxmon92u","category_id":"ck1q8dydp000js99gpzx483e5","_id":"ck1q8dydq000ps99g6j8cavil"},{"post_id":"ck1q8dydi0008s99g0wumg0kl","category_id":"ck1q8dydq000ns99gqoztwk6y","_id":"ck1q8dydr000ts99gpg5rxfoc"},{"post_id":"ck1q8dydj000bs99gpyt5rose","category_id":"ck1q8dydq000ns99gqoztwk6y","_id":"ck1q8dydr000ws99g35vlkvt2"},{"post_id":"ck1q8dydk000cs99g4wlengu1","category_id":"ck1q8dydr000ss99g4tcu5wy9","_id":"ck1q8dyds0011s99goocdjzxs"},{"post_id":"ck1q8dydn000gs99gplxyk8g6","category_id":"ck1q8dydr000xs99gpe4p7wzp","_id":"ck1q8dydt0016s99gs36he0y0"}],"PostTag":[{"post_id":"ck1q8dyd70000s99gip1cntw7","tag_id":"ck1q8dydf0005s99gr2mn3r1g","_id":"ck1q8dydo000hs99gn79feusu"},{"post_id":"ck1q8dyd70000s99gip1cntw7","tag_id":"ck1q8dydj000as99g8avkjlvx","_id":"ck1q8dydp000is99g4z6d1kma"},{"post_id":"ck1q8dydc0002s99gi9cls74v","tag_id":"ck1q8dydm000fs99gy6iuu3h0","_id":"ck1q8dydr000vs99gz1jhi0fk"},{"post_id":"ck1q8dydc0002s99gi9cls74v","tag_id":"ck1q8dydp000ls99guxafoqoc","_id":"ck1q8dyds000ys99gm80v0vqb"},{"post_id":"ck1q8dydc0002s99gi9cls74v","tag_id":"ck1q8dydq000os99g3viwpkat","_id":"ck1q8dyds0010s99gaim5hlfe"},{"post_id":"ck1q8dydc0002s99gi9cls74v","tag_id":"ck1q8dydr000rs99grmbz17su","_id":"ck1q8dyds0012s99gxtxcdg71"},{"post_id":"ck1q8dydg0006s99gndv03ljg","tag_id":"ck1q8dydr000us99gl3d55v7g","_id":"ck1q8dyds0014s99goepmp670"},{"post_id":"ck1q8dydh0007s99glxmon92u","tag_id":"ck1q8dyds000zs99guxi91zts","_id":"ck1q8dydt0015s99gohgq4cpo"},{"post_id":"ck1q8dydi0008s99g0wumg0kl","tag_id":"ck1q8dyds0013s99gjg89w8h6","_id":"ck1q8dydt0018s99gk4bxgins"},{"post_id":"ck1q8dydj000bs99gpyt5rose","tag_id":"ck1q8dyds0013s99gjg89w8h6","_id":"ck1q8dydt001as99g5vexxwuw"},{"post_id":"ck1q8dydk000cs99g4wlengu1","tag_id":"ck1q8dydt0019s99g14sysww2","_id":"ck1q8dydu001ds99g0fj6mdzp"},{"post_id":"ck1q8dydk000cs99g4wlengu1","tag_id":"ck1q8dydu001bs99gmpd6vef8","_id":"ck1q8dydu001es99gijzrdvuh"},{"post_id":"ck1q8dydn000gs99gplxyk8g6","tag_id":"ck1q8dydu001cs99gs287qm8k","_id":"ck1q8dydu001gs99gbhgkz88i"},{"post_id":"ck1q8dydn000gs99gplxyk8g6","tag_id":"ck1q8dydu001fs99g0w2s5pfj","_id":"ck1q8dydu001hs99g8z1tjpet"}],"Tag":[{"name":"ps","_id":"ck1q8dydf0005s99gr2mn3r1g"},{"name":"剪切蒙版","_id":"ck1q8dydj000as99g8avkjlvx"},{"name":"nuxt.js","_id":"ck1q8dydm000fs99gy6iuu3h0"},{"name":"@nuxtjs/axios","_id":"ck1q8dydp000ls99guxafoqoc"},{"name":"proxy","_id":"ck1q8dydq000os99g3viwpkat"},{"name":"ssr","_id":"ck1q8dydr000rs99grmbz17su"},{"name":"vuejs","_id":"ck1q8dydr000us99gl3d55v7g"},{"name":"docker","_id":"ck1q8dyds000zs99guxi91zts"},{"name":"小程序","_id":"ck1q8dyds0013s99gjg89w8h6"},{"name":"frp","_id":"ck1q8dydt0019s99g14sysww2"},{"name":"内网穿透","_id":"ck1q8dydu001bs99gmpd6vef8"},{"name":"linux","_id":"ck1q8dydu001cs99gs287qm8k"},{"name":"命令行","_id":"ck1q8dydu001fs99g0w2s5pfj"}]}}